 Author: James Psota
 File:   ocperf_events.txt 

 Copyright (c) 2024 James Psota
 __________________________________________

 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.

  branch-instructions OR branches                    [Hardware event]
  branch-misses                                      [Hardware event]
  bus-cycles                                         [Hardware event]
  cache-misses                                       [Hardware event]
  cache-references                                   [Hardware event]
  cpu-cycles OR cycles                               [Hardware event]
  instructions                                       [Hardware event]
  ref-cycles                                         [Hardware event]
  stalled-cycles-backend OR idle-cycles-backend      [Hardware event]
  stalled-cycles-frontend OR idle-cycles-frontend    [Hardware event]
  alignment-faults                                   [Software event]
  context-switches OR cs                             [Software event]
  cpu-clock                                          [Software event]
  cpu-migrations OR migrations                       [Software event]
  dummy                                              [Software event]
  emulation-faults                                   [Software event]
  major-faults                                       [Software event]
  minor-faults                                       [Software event]
  page-faults OR faults                              [Software event]
  task-clock                                         [Software event]
  L1-dcache-load-misses                              [Hardware cache event]
  L1-dcache-loads                                    [Hardware cache event]
  L1-dcache-prefetch-misses                          [Hardware cache event]
  L1-dcache-store-misses                             [Hardware cache event]
  L1-dcache-stores                                   [Hardware cache event]
  L1-icache-load-misses                              [Hardware cache event]
  LLC-load-misses                                    [Hardware cache event]
  LLC-loads                                          [Hardware cache event]
  LLC-prefetch-misses                                [Hardware cache event]
  LLC-prefetches                                     [Hardware cache event]
  LLC-store-misses                                   [Hardware cache event]
  LLC-stores                                         [Hardware cache event]
  branch-load-misses                                 [Hardware cache event]
  branch-loads                                       [Hardware cache event]
  dTLB-load-misses                                   [Hardware cache event]
  dTLB-loads                                         [Hardware cache event]
  dTLB-store-misses                                  [Hardware cache event]
  dTLB-stores                                        [Hardware cache event]
  iTLB-load-misses                                   [Hardware cache event]
  iTLB-loads                                         [Hardware cache event]
  node-load-misses                                   [Hardware cache event]
  node-loads                                         [Hardware cache event]
  node-prefetch-misses                               [Hardware cache event]
  node-prefetches                                    [Hardware cache event]
  node-store-misses                                  [Hardware cache event]
  node-stores                                        [Hardware cache event]
  branch-instructions OR cpu/branch-instructions/    [Kernel PMU event]
  branch-misses OR cpu/branch-misses/                [Kernel PMU event]
  bus-cycles OR cpu/bus-cycles/                      [Kernel PMU event]
  cache-misses OR cpu/cache-misses/                  [Kernel PMU event]
  cache-references OR cpu/cache-references/          [Kernel PMU event]
  cpu-cycles OR cpu/cpu-cycles/                      [Kernel PMU event]
  instructions OR cpu/instructions/                  [Kernel PMU event]
  mem-loads OR cpu/mem-loads/                        [Kernel PMU event]
  mem-stores OR cpu/mem-stores/                      [Kernel PMU event]
  ref-cycles OR cpu/ref-cycles/                      [Kernel PMU event]
  stalled-cycles-backend OR cpu/stalled-cycles-backend/ [Kernel PMU event]
  stalled-cycles-frontend OR cpu/stalled-cycles-frontend/ [Kernel PMU event]
  uncore_imc_0/cas_count_read/                       [Kernel PMU event]
  uncore_imc_0/cas_count_write/                      [Kernel PMU event]
  uncore_imc_0/clockticks/                           [Kernel PMU event]
  uncore_imc_1/cas_count_read/                       [Kernel PMU event]
  uncore_imc_1/cas_count_write/                      [Kernel PMU event]
  uncore_imc_1/clockticks/                           [Kernel PMU event]
  uncore_imc_2/cas_count_read/                       [Kernel PMU event]
  uncore_imc_2/cas_count_write/                      [Kernel PMU event]
  uncore_imc_2/clockticks/                           [Kernel PMU event]
  uncore_imc_3/cas_count_read/                       [Kernel PMU event]
  uncore_imc_3/cas_count_write/                      [Kernel PMU event]
  uncore_imc_3/clockticks/                           [Kernel PMU event]
  uncore_qpi_0/clockticks/                           [Kernel PMU event]
  uncore_qpi_0/drs_data/                             [Kernel PMU event]
  uncore_qpi_0/ncb_data/                             [Kernel PMU event]
  uncore_qpi_0/txl_flits_active/                     [Kernel PMU event]
  uncore_qpi_1/clockticks/                           [Kernel PMU event]
  uncore_qpi_1/drs_data/                             [Kernel PMU event]
  uncore_qpi_1/ncb_data/                             [Kernel PMU event]
  uncore_qpi_1/txl_flits_active/                     [Kernel PMU event]

cache:
  l1d.all_m_replacement                             
       [Cache lines in M state evicted out of L1D due to Snoop HitM or dirty
        line replacement]
  l1d.allocated_in_m                                
       [Allocated L1D data cache lines in M state]
  l1d.eviction                                      
       [L1D data cache lines in M state evicted due to replacement]
  l1d.replacement                                   
       [L1D data line replacements]
  l1d_blocks.bank_conflict_cycles                   
       [Cycles when dispatched loads are cancelled due to L1D bank conflicts
        with other load ports]
  l1d_pend_miss.fb_full                             
       [Cycles a demand request was blocked due to Fill Buffers inavailability]
  l1d_pend_miss.pending                             
       [L1D miss oustandings duration in cycles]
  l1d_pend_miss.pending_cycles                      
       [Cycles with L1D load Misses outstanding]
  l1d_pend_miss.pending_cycles_any                  
       [Cycles with L1D load Misses outstanding from any thread on physical
        core]
  l2_l1d_wb_rqsts.all                               
       [Not rejected writebacks from L1D to L2 cache lines in any state]
  l2_l1d_wb_rqsts.hit_e                             
       [Not rejected writebacks from L1D to L2 cache lines in E state]
  l2_l1d_wb_rqsts.hit_m                             
       [Not rejected writebacks from L1D to L2 cache lines in M state]
  l2_l1d_wb_rqsts.hit_s                             
       [Not rejected writebacks from L1D to L2 cache lines in S state]
  l2_l1d_wb_rqsts.miss                              
       [Count the number of modified Lines evicted from L1 and missed L2.
        (Non-rejected WBs from the DCU.)]
  l2_lines_in.all                                   
       [L2 cache lines filling L2]
  l2_lines_in.e                                     
       [L2 cache lines in E state filling L2]
  l2_lines_in.i                                     
       [L2 cache lines in I state filling L2]
  l2_lines_in.s                                     
       [L2 cache lines in S state filling L2]
  l2_lines_out.demand_clean                         
       [Clean L2 cache lines evicted by demand]
  l2_lines_out.demand_dirty                         
       [Dirty L2 cache lines evicted by demand]
  l2_lines_out.dirty_all                            
       [Dirty L2 cache lines filling the L2]
  l2_lines_out.pf_clean                             
       [Clean L2 cache lines evicted by L2 prefetch]
  l2_lines_out.pf_dirty                             
       [Dirty L2 cache lines evicted by L2 prefetch]
  l2_rqsts.all_code_rd                              
       [L2 code requests]
  l2_rqsts.all_demand_data_rd                       
       [Demand Data Read requests]
  l2_rqsts.all_pf                                   
       [Requests from L2 hardware prefetchers]
  l2_rqsts.all_rfo                                  
       [RFO requests to L2 cache]
  l2_rqsts.code_rd_hit                              
       [L2 cache hits when fetching instructions, code reads]
  l2_rqsts.code_rd_miss                             
       [L2 cache misses when fetching instructions]
  l2_rqsts.demand_data_rd_hit                       
       [Demand Data Read requests that hit L2 cache]
  l2_rqsts.pf_hit                                   
       [Requests from the L2 hardware prefetchers that hit L2 cache]
  l2_rqsts.pf_miss                                  
       [Requests from the L2 hardware prefetchers that miss L2 cache]
  l2_rqsts.rfo_hit                                  
       [RFO requests that hit L2 cache]
  l2_rqsts.rfo_miss                                 
       [RFO requests that miss L2 cache]
  l2_store_lock_rqsts.all                           
       [RFOs that access cache lines in any state]
  l2_store_lock_rqsts.hit_e                         
       [RFOs that hit cache lines in E state]
  l2_store_lock_rqsts.hit_m                         
       [RFOs that hit cache lines in M state]
  l2_store_lock_rqsts.miss                          
       [RFOs that miss cache lines]
  l2_trans.all_pf                                   
       [L2 or LLC HW prefetches that access L2 cache]
  l2_trans.all_requests                             
       [Transactions accessing L2 pipe]
  l2_trans.code_rd                                  
       [L2 cache accesses when fetching instructions]
  l2_trans.demand_data_rd                           
       [Demand Data Read requests that access L2 cache]
  l2_trans.l1d_wb                                   
       [L1D writebacks that access L2 cache]
  l2_trans.l2_fill                                  
       [L2 fill requests that access L2 cache]
  l2_trans.l2_wb                                    
       [L2 writebacks that access L2 cache]
  l2_trans.rfo                                      
       [RFO requests that access L2 cache]
  lock_cycles.cache_lock_duration                   
       [Cycles when L1D is locked]
  longest_lat_cache.miss                            
       [Core-originated cacheable demand requests missed LLC]
  longest_lat_cache.reference                       
       [Core-originated cacheable demand requests that refer to LLC]
  mem_load_uops_llc_hit_retired.xsnp_hit            
       [Retired load uops which data sources were LLC and cross-core snoop
        hits in on-pkg core cache]
  mem_load_uops_llc_hit_retired.xsnp_hitm           
       [Retired load uops which data sources were HitM responses from shared
        LLC]
  mem_load_uops_llc_hit_retired.xsnp_miss           
       [Retired load uops which data sources were LLC hit and cross-core snoop
        missed in on-pkg core cache]
  mem_load_uops_llc_hit_retired.xsnp_none           
       [Retired load uops which data sources were hits in LLC without snoops
        required]
  mem_load_uops_llc_miss_retired.local_dram         
       [Data from local DRAM either Snoop not needed or Snoop Miss (RspI)]
  mem_load_uops_llc_miss_retired.remote_dram        
       [Data from remote DRAM either Snoop not needed or Snoop Miss (RspI)]
  mem_load_uops_retired.hit_lfb                     
       [Retired load uops which data sources were load uops missed L1 but hit
        FB due to preceding miss to the same cache line with data not ready
        (Precise event)]
  mem_load_uops_retired.l1_hit                      
       [Retired load uops with L1 cache hits as data sources (Precise event)]
  mem_load_uops_retired.l2_hit                      
       [Retired load uops with L2 cache hits as data sources (Precise event)]
  mem_load_uops_retired.llc_hit                     
       [Retired load uops which data sources were data hits in LLC without
        snoops required]
  mem_load_uops_retired.llc_miss                    
       [Miss in last-level (L3) cache. Excludes Unknown data-source]
  mem_uops_retired.all_loads                        
       [All retired load uops (Precise event)]
  mem_uops_retired.all_stores                       
       [All retired store uops (Precise event)]
  mem_uops_retired.lock_loads                       
       [Retired load uops with locked access (Precise event)]
  mem_uops_retired.split_loads                      
       [Retired load uops that split across a cacheline boundary (Precise
        event)]
  mem_uops_retired.split_stores                     
       [Retired store uops that split across a cacheline boundary (Precise
        event)]
  mem_uops_retired.stlb_miss_loads                  
       [Retired load uops that miss the STLB (Precise event)]
  mem_uops_retired.stlb_miss_stores                 
       [Retired store uops that miss the STLB (Precise event)]
  offcore_requests.all_data_rd                      
       [Demand and prefetch data reads]
  offcore_requests.demand_code_rd                   
       [Cacheable and noncachaeble code read requests]
  offcore_requests.demand_data_rd                   
       [Demand Data Read requests sent to uncore]
  offcore_requests.demand_rfo                       
       [Demand RFO requests including regular RFOs, locks, ItoM]
  offcore_requests_buffer.sq_full                   
       [Cases when offcore requests buffer cannot take more entries for core]
  offcore_requests_outstanding.all_data_rd          
       [Offcore outstanding cacheable Core Data Read transactions in
        SuperQueue (SQ), queue to uncore]
  offcore_requests_outstanding.cycles_with_data_rd  
       [Cycles when offcore outstanding cacheable Core Data Read transactions
        are present in SuperQueue (SQ), queue to uncore]
  offcore_requests_outstanding.cycles_with_demand_data_rd
       [Cycles when offcore outstanding Demand Data Read transactions are
        present in SuperQueue (SQ), queue to uncore]
  offcore_requests_outstanding.cycles_with_demand_rfo
       [Offcore outstanding demand rfo reads transactions in SuperQueue (SQ),
        queue to uncore, every cycle]
  offcore_requests_outstanding.demand_data_rd       
       [Offcore outstanding Demand Data Read transactions in uncore queue]
  offcore_requests_outstanding.demand_data_rd_c6    
       [Cycles with at least 6 offcore outstanding Demand Data Read
        transactions in uncore queue]
  offcore_requests_outstanding.demand_rfo           
       [Offcore outstanding RFO store transactions in SuperQueue (SQ), queue
        to uncore]
  offcore_response.all_data_rd.any_response         
       [Counts all demand & prefetch data reads]
  offcore_response.all_data_rd.llc_hit.hit_other_core_no_fwd
       [Counts demand & prefetch data reads that hit in the LLC and the snoops
        to sibling cores hit in either E/S state and the line is not forwarded]
  offcore_response.all_data_rd.llc_hit.hitm_other_core
       [Counts demand & prefetch data reads that hit in the LLC and the snoop
        to one of the sibling cores hits the line in M state and the line is
        forwarded]
  offcore_response.all_data_rd.llc_hit.no_snoop_needed
       [Counts demand & prefetch data reads that hit in the LLC and sibling
        core snoops are not needed as either the core-valid bit is not set or
        the shared line is present in multiple cores]
  offcore_response.all_data_rd.llc_hit.snoop_miss   
       [Counts demand & prefetch data reads that hit in the LLC and sibling
        core snoop returned a clean response]
  offcore_response.all_pf_data_rd.llc_hit.any_response
       [Counts all prefetch data reads that hit the LLC]
  offcore_response.all_pf_data_rd.llc_hit.hit_other_core_no_fwd
       [Counts prefetch data reads that hit in the LLC and the snoops to
        sibling cores hit in either E/S state and the line is not forwarded]
  offcore_response.all_pf_data_rd.llc_hit.hitm_other_core
       [Counts prefetch data reads that hit in the LLC and the snoop to one of
        the sibling cores hits the line in M state and the line is forwarded]
  offcore_response.all_pf_data_rd.llc_hit.no_snoop_needed
       [Counts prefetch data reads that hit in the LLC and sibling core snoops
        are not needed as either the core-valid bit is not set or the shared
        line is present in multiple cores]
  offcore_response.all_pf_data_rd.llc_hit.snoop_miss
       [Counts prefetch data reads that hit in the LLC and sibling core snoop
        returned a clean response]
  offcore_response.all_reads.any_response           
       [Counts all data/code/rfo references (demand & prefetch)]
  offcore_response.all_reads.llc_hit.any_response   
       [Counts all data/code/rfo reads (demand & prefetch) that hit in the LLC]
  offcore_response.all_reads.llc_hit.hit_other_core_no_fwd
       [Counts all data/code/rfo reads (demand & prefetch) that hit in the LLC
        and the snoops to sibling cores hit in either E/S state and the line
        is not forwarded]
  offcore_response.all_reads.llc_hit.hitm_other_core
       [Counts all data/code/rfo reads (demand & prefetch) that hit in the LLC
        and the snoop to one of the sibling cores hits the line in M state and
        the line is forwarded]
  offcore_response.all_reads.llc_hit.no_snoop_needed
       [Counts all data/code/rfo reads (demand & prefetch) that hit in the LLC
        and sibling core snoops are not needed as either the core-valid bit is
        not set or the shared line is present in multiple cores]
  offcore_response.all_reads.llc_hit.snoop_miss     
       [Counts all data/code/rfo reads (demand & prefetch) that hit in the LLC
        and sibling core snoop returned a clean response]
  offcore_response.all_rfo.any_response             
       [Counts all demand & prefetch prefetch RFOs]
  offcore_response.corewb.any_response              
       [Counts all writebacks from the core to the LLC]
  offcore_response.demand_code_rd.any_response      
       [Counts all demand code reads]
  offcore_response.demand_code_rd.llc_hit.any_response
       [Counts all demand code reads that hit in the LLC]
  offcore_response.demand_data_rd.any_response      
       [Counts all demand data reads]
  offcore_response.demand_data_rd.llc_hit.any_response
       [Counts all demand data reads that hit in the LLC]
  offcore_response.demand_data_rd.llc_hit.hit_other_core_no_fwd
       [Counts demand data reads that hit in the LLC and the snoops to sibling
        cores hit in either E/S state and the line is not forwarded]
  offcore_response.demand_data_rd.llc_hit.hitm_other_core
       [Counts demand data reads that hit in the LLC and the snoop to one of
        the sibling cores hits the line in M state and the line is forwarded]
  offcore_response.demand_data_rd.llc_hit.no_snoop_needed
       [Counts demand data reads that hit in the LLC and sibling core snoops
        are not needed as either the core-valid bit is not set or the shared
        line is present in multiple cores]
  offcore_response.demand_data_rd.llc_hit.snoop_miss
       [Counts demand data reads that hit in the LLC and sibling core snoop
        returned a clean response]
  offcore_response.demand_rfo.any_response          
       [Counts all demand rfo's]
  offcore_response.other.lru_hints                  
       [Counts L2 hints sent to LLC to keep a line from being evicted out of
        the core caches]
  offcore_response.other.portio_mmio_uc             
       [Counts miscellaneous accesses that include port i/o, MMIO and
        uncacheable memory accesses]
  offcore_response.pf_l2_code_rd.llc_hit.any_response
       [Counts all prefetch (that bring data to L2) code reads that hit in the
        LLC]
  offcore_response.pf_l2_data_rd.llc_hit.any_response
       [Counts prefetch (that bring data to L2) data reads that hit in the LLC]
  offcore_response.pf_l2_data_rd.llc_hit.hit_other_core_no_fwd
       [Counts prefetch (that bring data to L2) data reads that hit in the LLC
        and the snoops to sibling cores hit in either E/S state and the line
        is not forwarded]
  offcore_response.pf_l2_data_rd.llc_hit.hitm_other_core
       [Counts prefetch (that bring data to L2) data reads that hit in the LLC
        and the snoop to one of the sibling cores hits the line in M state and
        the line is forwarded]
  offcore_response.pf_l2_data_rd.llc_hit.no_snoop_needed
       [Counts prefetch (that bring data to L2) data reads that hit in the LLC
        and sibling core snoops are not needed as either the core-valid bit is
        not set or the shared line is present in multiple cores]
  offcore_response.pf_l2_data_rd.llc_hit.snoop_miss 
       [Counts prefetch (that bring data to L2) data reads that hit in the LLC
        and the snoops sent to sibling cores return clean response]
  offcore_response.pf_llc_code_rd.llc_hit.any_response
       [Counts all prefetch (that bring data to LLC only) code reads that hit
        in the LLC]
  offcore_response.pf_llc_data_rd.llc_hit.any_response
       [Counts prefetch (that bring data to LLC only) data reads that hit in
        the LLC]
  offcore_response.pf_llc_data_rd.llc_hit.hit_other_core_no_fwd
       [Counts prefetch (that bring data to LLC only) data reads that hit in
        the LLC and the snoops to sibling cores hit in either E/S state and
        the line is not forwarded]
  offcore_response.pf_llc_data_rd.llc_hit.hitm_other_core
       [Counts prefetch (that bring data to LLC only) data reads that hit in
        the LLC and the snoop to one of the sibling cores hits the line in M
        state and the line is forwarded]
  offcore_response.pf_llc_data_rd.llc_hit.no_snoop_needed
       [Counts prefetch (that bring data to LLC only) data reads that hit in
        the LLC and sibling core snoops are not needed as either the
        core-valid bit is not set or the shared line is present in multiple
        cores]
  offcore_response.pf_llc_data_rd.llc_hit.snoop_miss
       [Counts prefetch (that bring data to LLC only) data reads that hit in
        the LLC and the snoops sent to sibling cores return clean response]
  offcore_response.split_lock_uc_lock.any_response  
       [Counts requests where the address of an atomic lock instruction spans
        a cache line boundary or the lock instruction is executed on
        uncacheable address]
  offcore_response.streaming_stores.any_response    
       [Counts non-temporal stores]
  sq_misc.split_lock                                
       [Split locks in SQ]

floating point:
  fp_assist.any                                     
       [Cycles with any input/output SSE or FP assist]
  fp_assist.simd_input                              
       [Number of SIMD FP assists due to input values]
  fp_assist.simd_output                             
       [Number of SIMD FP assists due to Output values]
  fp_assist.x87_input                               
       [Number of X87 assists due to input value]
  fp_assist.x87_output                              
       [Number of X87 assists due to output value]
  fp_comp_ops_exe.sse_packed_double                 
       [Number of SSE* or AVX-128 FP Computational packed double-precision
        uops issued this cycle]
  fp_comp_ops_exe.sse_packed_single                 
       [Number of SSE* or AVX-128 FP Computational packed single-precision
        uops issued this cycle]
  fp_comp_ops_exe.sse_scalar_double                 
       [Number of SSE* or AVX-128 FP Computational scalar double-precision
        uops issued this cycle]
  fp_comp_ops_exe.sse_scalar_single                 
       [Number of SSE* or AVX-128 FP Computational scalar single-precision
        uops issued this cycle]
  fp_comp_ops_exe.x87                               
       [Number of FP Computational Uops Executed this cycle. The number of
        FADD, FSUB, FCOM, FMULs, integer MULsand IMULs, FDIVs, FPREMs, FSQRTS,
        integer DIVs, and IDIVs. This event does not distinguish an FADD used
        in the middle of a transcendental flow from a s]
  other_assists.avx_store                           
       [Number of GSSE memory assist for stores. GSSE microcode assist is
        being invoked whenever the hardware is unable to properly handle
        GSSE-256b operations]
  other_assists.avx_to_sse                          
       [Number of transitions from AVX-256 to legacy SSE when penalty
        applicable]
  other_assists.sse_to_avx                          
       [Number of transitions from SSE to AVX-256 when penalty applicable]
  simd_fp_256.packed_double                         
       [Number of AVX-256 Computational FP double precision uops issued this
        cycle]
  simd_fp_256.packed_single                         
       [Number of GSSE-256 Computational FP single precision uops issued this
        cycle]

frontend:
  dsb2mite_switches.count                           
       [Decode Stream Buffer (DSB)-to-MITE switches]
  dsb2mite_switches.penalty_cycles                  
       [Decode Stream Buffer (DSB)-to-MITE switch true penalty cycles]
  dsb_fill.all_cancel                               
       [Cases of cancelling valid Decode Stream Buffer (DSB) fill not because
        of exceeding way limit]
  dsb_fill.exceed_dsb_lines                         
       [Cycles when Decode Stream Buffer (DSB) fill encounter more than 3
        Decode Stream Buffer (DSB) lines]
  dsb_fill.other_cancel                             
       [Cases of cancelling valid DSB fill not because of exceeding way limit]
  icache.hit                                        
       [Number of Instruction Cache, Streaming Buffer and Victim Cache Reads.
        both cacheable and noncacheable, including UC fetches]
  icache.misses                                     
       [Instruction cache, streaming buffer and victim cache misses]
  idq.all_dsb_cycles_4_uops                         
       [Cycles Decode Stream Buffer (DSB) is delivering 4 Uops]
  idq.all_dsb_cycles_any_uops                       
       [Cycles Decode Stream Buffer (DSB) is delivering any Uop]
  idq.all_mite_cycles_4_uops                        
       [Cycles MITE is delivering 4 Uops]
  idq.all_mite_cycles_any_uops                      
       [Cycles MITE is delivering any Uop]
  idq.dsb_cycles                                    
       [Cycles when uops are being delivered to Instruction Decode Queue (IDQ)
        from Decode Stream Buffer (DSB) path]
  idq.dsb_uops                                      
       [Uops delivered to Instruction Decode Queue (IDQ) from the Decode
        Stream Buffer (DSB) path]
  idq.empty                                         
       [Instruction Decode Queue (IDQ) empty cycles]
  idq.mite_all_uops                                 
       [Uops delivered to Instruction Decode Queue (IDQ) from MITE path]
  idq.mite_cycles                                   
       [Cycles when uops are being delivered to Instruction Decode Queue (IDQ)
        from MITE path]
  idq.mite_uops                                     
       [Uops delivered to Instruction Decode Queue (IDQ) from MITE path]
  idq.ms_cycles                                     
       [Cycles when uops are being delivered to Instruction Decode Queue (IDQ)
        while Microcode Sequenser (MS) is busy]
  idq.ms_dsb_cycles                                 
       [Cycles when uops initiated by Decode Stream Buffer (DSB) are being
        delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser
        (MS) is busy]
  idq.ms_dsb_occur                                  
       [Deliveries to Instruction Decode Queue (IDQ) initiated by Decode
        Stream Buffer (DSB) while Microcode Sequenser (MS) is busy]
  idq.ms_dsb_uops                                   
       [Uops initiated by Decode Stream Buffer (DSB) that are being delivered
        to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is
        busy]
  idq.ms_mite_uops                                  
       [Uops initiated by MITE and delivered to Instruction Decode Queue (IDQ)
        while Microcode Sequenser (MS) is busy]
  idq.ms_switches                                   
       [Number of switches from DSB (Decode Stream Buffer) or MITE (legacy
        decode pipeline) to the Microcode Sequencer]
  idq.ms_uops                                       
       [Uops delivered to Instruction Decode Queue (IDQ) while Microcode
        Sequenser (MS) is busy]
  idq_uops_not_delivered.core                       
       [Uops not delivered to Resource Allocation Table (RAT) per thread when
        backend of the machine is not stalled]
  idq_uops_not_delivered.cycles_0_uops_deliv.core   
       [Cycles per thread when 4 or more uops are not delivered to Resource
        Allocation Table (RAT) when backend of the machine is not stalled]
  idq_uops_not_delivered.cycles_fe_was_ok           
       [Counts cycles FE delivered 4 uops or Resource Allocation Table (RAT)
        was stalling FE]
  idq_uops_not_delivered.cycles_ge_1_uop_deliv.core 
       [Cycles when 1 or more uops were delivered to the by the front end]
  idq_uops_not_delivered.cycles_le_1_uop_deliv.core 
       [Cycles per thread when 3 or more uops are not delivered to Resource
        Allocation Table (RAT) when backend of the machine is not stalled]
  idq_uops_not_delivered.cycles_le_2_uop_deliv.core 
       [Cycles with less than 2 uops delivered by the front end]
  idq_uops_not_delivered.cycles_le_3_uop_deliv.core 
       [Cycles with less than 3 uops delivered by the front end]

memory:
  machine_clears.memory_ordering                    
       [Counts the number of machine clears due to memory order conflicts]
  mem_trans_retired.load_latency_gt_128             
       [Loads with latency value being above 128 (Must be precise)]
  mem_trans_retired.load_latency_gt_16              
       [Loads with latency value being above 16 (Must be precise)]
  mem_trans_retired.load_latency_gt_256             
       [Loads with latency value being above 256 (Must be precise)]
  mem_trans_retired.load_latency_gt_32              
       [Loads with latency value being above 32 (Must be precise)]
  mem_trans_retired.load_latency_gt_4               
       [Loads with latency value being above 4 (Must be precise)]
  mem_trans_retired.load_latency_gt_512             
       [Loads with latency value being above 512 (Must be precise)]
  mem_trans_retired.load_latency_gt_64              
       [Loads with latency value being above 64 (Must be precise)]
  mem_trans_retired.load_latency_gt_8               
       [Loads with latency value being above 8 (Must be precise)]
  mem_trans_retired.precise_store                   
       [Sample stores and collect precise store operation via PEBS record.
        PMC3 only. (Precise Event - PEBS) (Must be precise)]
  misalign_mem_ref.loads                            
       [Speculative cache line split load uops dispatched to L1 cache]
  misalign_mem_ref.stores                           
       [Speculative cache line split STA uops dispatched to L1 cache]
  offcore_response.all_demand_mlc_pref_reads.llc_miss.any_response
       [This event counts all LLC misses for all demand and L2 prefetches. LLC
        prefetches are excluded]
  offcore_response.all_demand_mlc_pref_reads.llc_miss.local_dram
       [Counts all local dram accesses for all demand and L2 prefetches. LLC
        prefetches are excluded]
  offcore_response.all_demand_mlc_pref_reads.llc_miss.remote_hitm_hit_forward
       [This event counts all remote cache-to-cache transfers (includes HITM
        and HIT-Forward) for all demand and L2 prefetches. LLC prefetches are
        excluded]
  offcore_response.demand_code_rd.llc_miss.any_response
       [Counts all demand code reads that miss the LLC]
  offcore_response.demand_code_rd.llc_miss.local_dram
       [Counts all demand code reads that miss the LLC and the data returned
        from local dram]
  offcore_response.demand_code_rd.llc_miss.remote_dram
       [Counts all demand code reads that miss the LLC and the data returned
        from remote dram]
  offcore_response.demand_code_rd.llc_miss.remote_hit_forward
       [Counts all demand code reads that miss the LLC and the data forwarded
        from remote cache]
  offcore_response.demand_code_rd.llc_miss.remote_hitm
       [Counts all demand code reads that miss the LLC the data is found in M
        state in remote cache and forwarded from there]
  offcore_response.demand_data_rd.llc_miss.any_dram 
       [Counts demand data reads that miss the LLC and the data returned from
        remote & local dram]
  offcore_response.demand_data_rd.llc_miss.any_response
       [Counts demand data reads that miss in the LLC]
  offcore_response.demand_data_rd.llc_miss.local_dram
       [Counts demand data reads that miss the LLC and the data returned from
        local dram]
  offcore_response.demand_data_rd.llc_miss.remote_dram
       [Counts demand data reads that miss the LLC and the data returned from
        remote dram]
  offcore_response.demand_data_rd.llc_miss.remote_hit_forward
       [Counts demand data reads that miss the LLC and the data forwarded from
        remote cache]
  offcore_response.demand_data_rd.llc_miss.remote_hitm
       [Counts demand data reads that miss the LLC the data is found in M
        state in remote cache and forwarded from there]
  offcore_response.pf_l2_code_rd.llc_miss.any_response
       [Counts all prefetch (that bring data to L2) code reads that miss the
        LLC and the data returned from remote & local dram]
  offcore_response.pf_l2_data_rd.llc_miss.any_dram  
       [Counts prefetch (that bring data to L2) data reads that miss the LLC
        and the data returned from remote & local dram]
  offcore_response.pf_l2_data_rd.llc_miss.any_response
       [Counts prefetch (that bring data to L2) data reads that miss in the
        LLC]
  offcore_response.pf_l2_data_rd.llc_miss.local_dram
       [Counts prefetch (that bring data to L2) data reads that miss the LLC
        and the data returned from local dram]
  offcore_response.pf_l2_data_rd.llc_miss.remote_dram
       [Counts prefetch (that bring data to L2) data reads that miss the LLC
        and the data returned from remote dram]
  offcore_response.pf_l2_data_rd.llc_miss.remote_hit_forward
       [Counts prefetch (that bring data to L2) data reads that miss the LLC
        and the data forwarded from remote cache]
  offcore_response.pf_l2_data_rd.llc_miss.remote_hitm
       [Counts prefetch (that bring data to L2) data reads that miss the LLC
        the data is found in M state in remote cache and forwarded from there]
  offcore_response.pf_llc_code_rd.llc_miss.any_response
       [Counts all prefetch (that bring data to LLC only) code reads that miss
        in the LLC]
  offcore_response.pf_llc_data_rd.llc_miss.any_response
       [Counts prefetch (that bring data to LLC only) data reads that hit in
        the LLC and the snoops sent to sibling cores return clean response]

other:
  cpl_cycles.ring0                                  
       [Unhalted core cycles when the thread is in ring 0]
  cpl_cycles.ring0_trans                            
       [Number of intervals between processor halts while thread is in ring 0]
  cpl_cycles.ring123                                
       [Unhalted core cycles when thread is in rings 1, 2, or 3]
  hw_pre_req.dl1_miss                               
       [Hardware Prefetch requests that miss the L1D cache. This accounts for
        both L1 streamer and IP-based (IPP) HW prefetchers. A request is being
        counted each time it access the cache & miss it, including if a block
        is applicable or if hit the Fill Buffer for]
  insts_written_to_iq.insts                         
       [Valid instructions written to IQ per cycle]
  lock_cycles.split_lock_uc_lock_duration           
       [Cycles when L1 and L2 are locked due to UC or split lock]

pipeline:
  agu_bypass_cancel.count                           
       [This event counts executed load operations with all the following
        traits: 1. addressing of the format [base + offset], 2. the offset is
        between 1 and 2047, 3. the address specified in the base register is
        in one page and the address [base+offset] is in an]
  arith.fpu_div                                     
       [Divide operations executed]
  arith.fpu_div_active                              
       [Cycles when divider is busy executing divide operations]
  baclears.any                                      
       [Counts the total number when the front end is resteered, mainly when
        the BPU cannot provide a correct prediction and this is corrected by
        other branch handling mechanisms at the front end]
  br_inst_exec.all_branches                         
       [Speculative and retired branches]
  br_inst_exec.all_conditional                      
       [Speculative and retired macro-conditional branches]
  br_inst_exec.all_direct_jmp                       
       [Speculative and retired macro-unconditional branches excluding calls
        and indirects]
  br_inst_exec.all_direct_near_call                 
       [Speculative and retired direct near calls]
  br_inst_exec.all_indirect_jump_non_call_ret       
       [Speculative and retired indirect branches excluding calls and returns]
  br_inst_exec.all_indirect_near_return             
       [Speculative and retired indirect return branches]
  br_inst_exec.nontaken_conditional                 
       [Not taken macro-conditional branches]
  br_inst_exec.taken_conditional                    
       [Taken speculative and retired macro-conditional branches]
  br_inst_exec.taken_direct_jump                    
       [Taken speculative and retired macro-conditional branch instructions
        excluding calls and indirects]
  br_inst_exec.taken_direct_near_call               
       [Taken speculative and retired direct near calls]
  br_inst_exec.taken_indirect_jump_non_call_ret     
       [Taken speculative and retired indirect branches excluding calls and
        returns]
  br_inst_exec.taken_indirect_near_call             
       [Taken speculative and retired indirect calls]
  br_inst_exec.taken_indirect_near_return           
       [Taken speculative and retired indirect branches with return mnemonic]
  br_inst_retired.all_branches                      
       [All (macro) branch instructions retired]
  br_inst_retired.all_branches_pebs                 
       [All (macro) branch instructions retired. (Precise Event - PEBS) (Must
        be precise)]
  br_inst_retired.conditional                       
       [Conditional branch instructions retired (Precise event)]
  br_inst_retired.far_branch                        
       [Far branch instructions retired]
  br_inst_retired.near_call                         
       [Direct and indirect near call instructions retired (Precise event)]
  br_inst_retired.near_return                       
       [Return instructions retired (Precise event)]
  br_inst_retired.near_taken                        
       [Taken branch instructions retired (Precise event)]
  br_inst_retired.not_taken                         
       [Not taken branch instructions retired]
  br_misp_exec.all_branches                         
       [Speculative and retired mispredicted macro conditional branches]
  br_misp_exec.all_conditional                      
       [Speculative and retired mispredicted macro conditional branches]
  br_misp_exec.all_direct_near_call                 
       [Speculative and retired mispredicted direct near calls]
  br_misp_exec.all_indirect_jump_non_call_ret       
       [Mispredicted indirect branches excluding calls and returns]
  br_misp_exec.nontaken_conditional                 
       [Not taken speculative and retired mispredicted macro conditional
        branches]
  br_misp_exec.taken_conditional                    
       [Taken speculative and retired mispredicted macro conditional branches]
  br_misp_exec.taken_direct_near_call               
       [Taken speculative and retired mispredicted direct near calls]
  br_misp_exec.taken_indirect_jump_non_call_ret     
       [Taken speculative and retired mispredicted indirect branches excluding
        calls and returns]
  br_misp_exec.taken_indirect_near_call             
       [Taken speculative and retired mispredicted indirect calls]
  br_misp_exec.taken_return_near                    
       [Taken speculative and retired mispredicted indirect branches with
        return mnemonic]
  br_misp_retired.all_branches                      
       [All mispredicted macro branch instructions retired]
  br_misp_retired.all_branches_pebs                 
       [Mispredicted macro branch instructions retired. (Precise Event - PEBS)
        (Must be precise)]
  br_misp_retired.conditional                       
       [Mispredicted conditional branch instructions retired (Precise event)]
  br_misp_retired.near_call                         
       [Direct and indirect mispredicted near call instructions retired
        (Precise event)]
  br_misp_retired.not_taken                         
       [Mispredicted not taken branch instructions retired (Precise event)]
  br_misp_retired.taken                             
       [Mispredicted taken branch instructions retired (Precise event)]
  cpu_clk_thread_unhalted.one_thread_active         
       [Count XClk pulses when this thread is unhalted and the other is halted]
  cpu_clk_thread_unhalted.ref_xclk                  
       [Reference cycles when the thread is unhalted (counts at 100 MHz rate)]
  cpu_clk_thread_unhalted.ref_xclk_any              
       [Reference cycles when the at least one thread on the physical core is
        unhalted (counts at 100 MHz rate)]
  cpu_clk_unhalted.one_thread_active                
       [Count XClk pulses when this thread is unhalted and the other thread is
        halted]
  cpu_clk_unhalted.ref_tsc                          
       [Reference cycles when the core is not in halt state]
  cpu_clk_unhalted.ref_xclk                         
       [Reference cycles when the thread is unhalted (counts at 100 MHz rate)]
  cpu_clk_unhalted.ref_xclk_any                     
       [Reference cycles when the at least one thread on the physical core is
        unhalted (counts at 100 MHz rate)]
  cpu_clk_unhalted.thread                           
       [Core cycles when the thread is not in halt state]
  cpu_clk_unhalted.thread_any                       
       [Core cycles when at least one thread on the physical core is not in
        halt state]
  cpu_clk_unhalted.thread_p                         
       [Thread cycles when thread is not in halt state]
  cpu_clk_unhalted.thread_p_any                     
       [Core cycles when at least one thread on the physical core is not in
        halt state]
  cycle_activity.cycles_l1d_pending                 
       [Each cycle there was a miss-pending demand load this thread, increment
        by 1. Note this is in DCU and connected to Umask 1. Miss Pending
        demand load should be deduced by OR-ing increment bits of
        DCACHE_MISS_PEND.PENDING]
  cycle_activity.cycles_l2_pending                  
       [Each cycle there was a MLC-miss pending demand load this thread (i.e.
        Non-completed valid SQ entry allocated for demand load and waiting for
        Uncore), increment by 1. Note this is in MLC and connected to Umask 0]
  cycle_activity.cycles_no_dispatch                 
       [Each cycle there was no dispatch for this thread, increment by 1. Note
        this is connect to Umask 2. No dispatch can be deduced from the
        UOPS_EXECUTED event]
  cycle_activity.stalls_l1d_pending                 
       [Each cycle there was a miss-pending demand load this thread and no
        uops dispatched, increment by 1. Note this is in DCU and connected to
        Umask 1 and 2. Miss Pending demand load should be deduced by OR-ing
        increment bits of DCACHE_MISS_PEND.PENDING]
  cycle_activity.stalls_l2_pending                  
       [Each cycle there was a MLC-miss pending demand load and no uops
        dispatched on this thread (i.e. Non-completed valid SQ entry allocated
        for demand load and waiting for Uncore), increment by 1. Note this is
        in MLC and connected to Umask 0 and 2]
  ild_stall.iq_full                                 
       [Stall cycles because IQ is full]
  ild_stall.lcp                                     
       [Stalls caused by changing prefix length of the instruction]
  inst_retired.any                                  
       [Instructions retired from execution]
  inst_retired.any_p                                
       [Number of instructions retired. General Counter - architectural event]
  inst_retired.prec_dist                            
       [Instructions retired. (Precise Event - PEBS) (Must be precise)]
  int_misc.rat_stall_cycles                         
       [Cycles when Resource Allocation Table (RAT) external stall is sent to
        Instruction Decode Queue (IDQ) for the thread]
  int_misc.recovery_cycles                          
       [Number of cycles waiting for the checkpoints in Resource Allocation
        Table (RAT) to be recovered after Nuke due to all other cases except
        JEClear (e.g. whenever a ucode assist is needed like SSE exception,
        memory disambiguation, etc...)]
  int_misc.recovery_cycles_any                      
       [Core cycles the allocator was stalled due to recovery from earlier
        clear event for any thread running on the physical core (e.g.
        misprediction or memory nuke)]
  int_misc.recovery_stalls_count                    
       [Number of occurences waiting for the checkpoints in Resource
        Allocation Table (RAT) to be recovered after Nuke due to all other
        cases except JEClear (e.g. whenever a ucode assist is needed like SSE
        exception, memory disambiguation, etc...)]
  ld_blocks.all_block                               
       [Number of cases where any load ends up with a valid block-code written
        to the load buffer (including blocks due to Memory Order Buffer (MOB),
        Data Cache Unit (DCU), TLB, but load has no DCU miss)]
  ld_blocks.data_unknown                            
       [Loads delayed due to SB blocks, preceding store operations with known
        addresses but unknown data]
  ld_blocks.no_sr                                   
       [This event counts the number of times that split load operations are
        temporarily blocked because all resources for handling the split
        accesses are in use]
  ld_blocks.store_forward                           
       [Cases when loads get true Block-on-Store blocking code preventing
        store forwarding]
  ld_blocks_partial.address_alias                   
       [False dependencies in MOB due to partial compare]
  ld_blocks_partial.all_sta_block                   
       [This event counts the number of times that load operations are
        temporarily blocked because of older stores, with addresses that are
        not yet known. A load operation may incur more than one block of this
        type]
  load_hit_pre.hw_pf                                
       [Not software-prefetch load dispatches that hit FB allocated for
        hardware prefetch]
  load_hit_pre.sw_pf                                
       [Not software-prefetch load dispatches that hit FB allocated for
        software prefetch]
  lsd.cycles_4_uops                                 
       [Cycles 4 Uops delivered by the LSD, but didn't come from the decoder]
  lsd.cycles_active                                 
       [Cycles Uops delivered by the LSD, but didn't come from the decoder]
  lsd.uops                                          
       [Number of Uops delivered by the LSD]
  machine_clears.count                              
       [Number of machine clears (nukes) of any type]
  machine_clears.maskmov                            
       [This event counts the number of executed Intel AVX masked load
        operations that refer to an illegal address range with the mask bits
        set to 0]
  machine_clears.smc                                
       [Self-modifying code (SMC) detected]
  other_assists.itlb_miss_retired                   
       [Retired instructions experiencing ITLB misses]
  partial_rat_stalls.flags_merge_uop                
       [Increments the number of flags-merge uops in flight each cycle]
  partial_rat_stalls.flags_merge_uop_cycles         
       [Performance sensitive flags-merging uops added by Sandy Bridge u-arch]
  partial_rat_stalls.mul_single_uop                 
       [Multiply packed/scalar single precision uops allocated]
  partial_rat_stalls.slow_lea_window                
       [Cycles with at least one slow LEA uop being allocated]
  resource_stalls.any                               
       [Resource-related stall cycles]
  resource_stalls.lb                                
       [Counts the cycles of stall due to lack of load buffers]
  resource_stalls.lb_sb                             
       [Resource stalls due to load or store buffers all being in use]
  resource_stalls.mem_rs                            
       [Resource stalls due to memory buffers or Reservation Station (RS)
        being fully utilized]
  resource_stalls.ooo_rsrc                          
       [Resource stalls due to Rob being full, FCSW, MXCSR and OTHER]
  resource_stalls.rob                               
       [Cycles stalled due to re-order buffer full]
  resource_stalls.rs                                
       [Cycles stalled due to no eligible RS entry available]
  resource_stalls.sb                                
       [Cycles stalled due to no store buffers available. (not including
        draining form sync)]
  resource_stalls2.all_fl_empty                     
       [Cycles with either free list is empty]
  resource_stalls2.all_prf_control                  
       [Resource stalls2 control structures full for physical registers]
  resource_stalls2.bob_full                         
       [Cycles when Allocator is stalled if BOB is full and new branch needs
        it]
  resource_stalls2.ooo_rsrc                         
       [Resource stalls out of order resources full]
  rob_misc_events.lbr_inserts                       
       [Count cases of saving new LBR]
  rs_events.empty_cycles                            
       [Cycles when Reservation Station (RS) is empty for the thread]
  rs_events.empty_end                               
       [Counts end of periods where the Reservation Station (RS) was empty.
        Could be useful to precisely locate Frontend Latency Bound issues]
  uops_dispatched.core                              
       [Uops dispatched from any thread]
  uops_dispatched.thread                            
       [Uops dispatched per thread]
  uops_dispatched_port.port_0                       
       [Cycles per thread when uops are dispatched to port 0]
  uops_dispatched_port.port_0_core                  
       [Cycles per core when uops are dispatched to port 0]
  uops_dispatched_port.port_1                       
       [Cycles per thread when uops are dispatched to port 1]
  uops_dispatched_port.port_1_core                  
       [Cycles per core when uops are dispatched to port 1]
  uops_dispatched_port.port_2                       
       [Cycles per thread when load or STA uops are dispatched to port 2]
  uops_dispatched_port.port_2_core                  
       [Cycles per core when load or STA uops are dispatched to port 2]
  uops_dispatched_port.port_3                       
       [Cycles per thread when load or STA uops are dispatched to port 3]
  uops_dispatched_port.port_3_core                  
       [Cycles per core when load or STA uops are dispatched to port 3]
  uops_dispatched_port.port_4                       
       [Cycles per thread when uops are dispatched to port 4]
  uops_dispatched_port.port_4_core                  
       [Cycles per core when uops are dispatched to port 4]
  uops_dispatched_port.port_5                       
       [Cycles per thread when uops are dispatched to port 5]
  uops_dispatched_port.port_5_core                  
       [Cycles per core when uops are dispatched to port 5]
  uops_executed.core_cycles_ge_1                    
       [Cycles at least 1 micro-op is executed from any thread on physical
        core]
  uops_executed.core_cycles_ge_2                    
       [Cycles at least 2 micro-op is executed from any thread on physical
        core]
  uops_executed.core_cycles_ge_3                    
       [Cycles at least 3 micro-op is executed from any thread on physical
        core]
  uops_executed.core_cycles_ge_4                    
       [Cycles at least 4 micro-op is executed from any thread on physical
        core]
  uops_executed.core_cycles_none                    
       [Cycles with no micro-ops executed from any thread on physical core]
  uops_issued.any                                   
       [Uops that Resource Allocation Table (RAT) issues to Reservation
        Station (RS)]
  uops_issued.core_stall_cycles                     
       [Cycles when Resource Allocation Table (RAT) does not issue Uops to
        Reservation Station (RS) for all threads]
  uops_issued.stall_cycles                          
       [Cycles when Resource Allocation Table (RAT) does not issue Uops to
        Reservation Station (RS) for the thread]
  uops_retired.all                                  
       [Actually retired uops (Precise event)]
  uops_retired.core_stall_cycles                    
       [Cycles without actually retired uops]
  uops_retired.retire_slots                         
       [Retirement slots used (Precise event)]
  uops_retired.stall_cycles                         
       [Cycles without actually retired uops]
  uops_retired.total_cycles                         
       [Cycles with less than 10 actually retired uops]

uncore cache:
  llc_misses.data_read                              
       [LLC misses - demand and prefetch data reads - excludes LLC prefetches.
        Derived from unc_c_tor_inserts.miss_opcode.demand. Unit: uncore_cbox]
  llc_misses.itom_write                             
       [LLC misses for ItoM writes (as part of fast string memcpy stores).
        Derived from unc_c_tor_inserts.miss_opcode.itom_write. Unit:
        uncore_cbox]
  llc_misses.pcie_write                             
       [PCIe allocating writes that miss LLC - DDIO misses. Derived from
        unc_c_tor_inserts.miss_opcode.ddio_miss. Unit: uncore_cbox]
  llc_misses.uncacheable                            
       [LLC misses - Uncacheable reads. Derived from
        unc_c_tor_inserts.miss_opcode.uncacheable. Unit: uncore_cbox]
  llc_references.itom_write                         
       [ItoM write hits (as part of fast string memcpy stores). Derived from
        unc_c_tor_inserts.opcode.itom_write_hit. Unit: uncore_cbox]
  llc_references.pcie_ns_partial_write              
       [PCIe non-snoop writes (partial). Derived from
        unc_c_tor_inserts.opcode.pcie_partial_write. Unit: uncore_cbox]
  llc_references.pcie_ns_read                       
       [PCIe non-snoop reads. Derived from unc_c_tor_inserts.opcode.pcie_read.
        Unit: uncore_cbox]
  llc_references.pcie_ns_write                      
       [PCIe non-snoop writes (full line). Derived from
        unc_c_tor_inserts.opcode.pcie_full_write. Unit: uncore_cbox]
  llc_references.pcie_partial_read                  
       [Partial PCIe reads. Derived from
        unc_c_tor_inserts.opcode.pcie_partial. Unit: uncore_cbox]
  llc_references.pcie_read                          
       [PCIe read current. Derived from
        unc_c_tor_inserts.opcode.pcie_read_current. Unit: uncore_cbox]
  llc_references.pcie_write                         
       [PCIe allocating writes that hit in LLC (DDIO hits). Derived from
        unc_c_tor_inserts.opcode.ddio_hit. Unit: uncore_cbox]
  llc_references.streaming_full                     
       [Streaming stores (full cache line). Derived from
        unc_c_tor_inserts.opcode.streaming_full. Unit: uncore_cbox]
  llc_references.streaming_partial                  
       [Streaming stores (partial cache line). Derived from
        unc_c_tor_inserts.opcode.streaming_partial. Unit: uncore_cbox]
  unc_c_clockticks                                  
       [Uncore cache clock ticks. Derived from unc_c_clockticks. Unit:
        uncore_cbox]
  unc_c_llc_lookup.any                              
       [All LLC Misses (code+ data rd + data wr - including demand and
        prefetch). Derived from unc_c_llc_lookup.any. Unit: uncore_cbox]
  unc_c_llc_victims.m_state                         
       [M line evictions from LLC (writebacks to memory). Derived from
        unc_c_llc_victims.m_state. Unit: uncore_cbox]
  unc_c_tor_occupancy.llc_data_read                 
       [Occupancy counter for LLC data reads (demand and L2 prefetch). Derived
        from unc_c_tor_occupancy.miss_opcode.llc_data_read. Unit: uncore_cbox]
  unc_c_tor_occupancy.miss_all                      
       [Occupancy counter for all LLC misses; we divide this by
        UNC_C_CLOCKTICKS to get average Q depth. Derived from
        unc_c_tor_occupancy.miss_all. Unit: uncore_cbox]
  unc_h_requests.reads                              
       [read requests to home agent. Derived from unc_h_requests.reads. Unit:
        uncore_ha]
  unc_h_requests.writes                             
       [write requests to home agent. Derived from unc_h_requests.writes.
        Unit: uncore_ha]

uncore interconnect:
  unc_q_clockticks                                  
       [QPI clock ticks. Used to get percentages of QPI cycles events. Derived
        from unc_q_clockticks. Unit: uncore_qpi]
  unc_q_rxl0p_power_cycles                          
       [Cycles where receiving QPI link is in half-width mode. Derived from
        unc_q_rxl0p_power_cycles. Unit: uncore_qpi]
  unc_q_txl0p_power_cycles                          
       [Cycles where transmitting QPI link is in half-width mode. Derived from
        unc_q_txl0p_power_cycles. Unit: uncore_qpi]
  unc_q_txl_flits_g0.data                           
       [Number of data flits transmitted . Derived from
        unc_q_txl_flits_g0.data. Unit: uncore_qpi]
  unc_q_txl_flits_g0.non_data                       
       [Number of non data (control) flits transmitted . Derived from
        unc_q_txl_flits_g0.non_data. Unit: uncore_qpi]

uncore memory:
  unc_m_act_count                                   
       [Memory page activates. Derived from unc_m_act_count. Unit: uncore_imc]
  unc_m_cas_count.rd                                
       [read requests to memory controller. Derived from unc_m_cas_count.rd.
        Unit: uncore_imc]
  unc_m_cas_count.wr                                
       [write requests to memory controller. Derived from unc_m_cas_count.wr.
        Unit: uncore_imc]
  unc_m_clockticks                                  
       [Memory controller clock ticks. Used to get percentages of memory
        controller cycles events. Derived from unc_m_clockticks. Unit:
        uncore_imc]
  unc_m_power_channel_ppd                           
       [Cycles where DRAM ranks are in power down (CKE) mode. Derived from
        unc_m_power_channel_ppd. Unit: uncore_imc]
  unc_m_power_critical_throttle_cycles              
       [Cycles all ranks are in critical thermal throttle. Derived from
        unc_m_power_critical_throttle_cycles. Unit: uncore_imc]
  unc_m_power_self_refresh                          
       [Cycles Memory is in self refresh power mode. Derived from
        unc_m_power_self_refresh. Unit: uncore_imc]
  unc_m_pre_count.page_miss                         
       [Memory page conflicts. Derived from unc_m_pre_count.page_miss. Unit:
        uncore_imc]
  unc_m_rpq_occupancy                               
       [Occupancy counter for memory read queue. Derived from
        unc_m_rpq_occupancy. Unit: uncore_imc]

uncore power:
  unc_p_clockticks                                  
       [PCU clock ticks. Use to get percentages of PCU cycles events. Derived
        from unc_p_clockticks. Unit: uncore_pcu]
  unc_p_freq_band0_cycles                           
       [Counts the number of cycles that the uncore was running at a frequency
        greater than or equal to the frequency that is configured in the
        filter. (filter_band0=XXX with XXX in 100Mhz units). One can also use
        inversion (filter_inv=1) to track cycles when we were less than the
        configured frequency. Derived from unc_p_freq_band0_cycles. Unit:
        uncore_pcu]
  unc_p_freq_band0_transitions                      
       [Counts the number of times that the uncore transitioned a frequency
        greater than or equal to the frequency that is configured in the
        filter. (filter_band0=XXX with XXX in 100Mhz units). One can also use
        inversion (filter_inv=1) to track cycles when we were less than the
        configured frequency. Derived from unc_p_freq_band0_cycles. Unit:
        uncore_pcu]
  unc_p_freq_band1_cycles                           
       [Counts the number of cycles that the uncore was running at a frequency
        greater than or equal to the frequency that is configured in the
        filter. (filter_band1=XXX with XXX in 100Mhz units). One can also use
        inversion (filter_inv=1) to track cycles when we were less than the
        configured frequency. Derived from unc_p_freq_band1_cycles. Unit:
        uncore_pcu]
  unc_p_freq_band1_transitions                      
       [Counts the number of times that the uncore transistioned to a
        frequency greater than or equal to the frequency that is configured in
        the filter. (filter_band1=XXX with XXX in 100Mhz units). One can also
        use inversion (filter_inv=1) to track cycles when we were less than
        the configured frequency. Derived from unc_p_freq_band1_cycles. Unit:
        uncore_pcu]
  unc_p_freq_band2_cycles                           
       [Counts the number of cycles that the uncore was running at a frequency
        greater than or equal to the frequency that is configured in the
        filter. (filter_band2=XXX with XXX in 100Mhz units). One can also use
        inversion (filter_inv=1) to track cycles when we were less than the
        configured frequency. Derived from unc_p_freq_band2_cycles. Unit:
        uncore_pcu]
  unc_p_freq_band2_transitions                      
       [Counts the number of cycles that the uncore transitioned to a
        frequency greater than or equal to the frequency that is configured in
        the filter. (filter_band2=XXX with XXX in 100Mhz units). One can also
        use inversion (filter_inv=1) to track cycles when we were less than
        the configured frequency. Derived from unc_p_freq_band2_cycles. Unit:
        uncore_pcu]
  unc_p_freq_band3_cycles                           
       [Counts the number of cycles that the uncore was running at a frequency
        greater than or equal to the frequency that is configured in the
        filter. (filter_band3=XXX, with XXX in 100Mhz units). One can also use
        inversion (filter_inv=1) to track cycles when we were less than the
        configured frequency. Derived from unc_p_freq_band3_cycles. Unit:
        uncore_pcu]
  unc_p_freq_band3_transitions                      
       [Counts the number of cycles that the uncore transitioned to a
        frequency greater than or equal to the frequency that is configured in
        the filter. (filter_band3=XXX, with XXX in 100Mhz units). One can also
        use inversion (filter_inv=1) to track cycles when we were less than
        the configured frequency. Derived from unc_p_freq_band3_cycles. Unit:
        uncore_pcu]
  unc_p_freq_ge_1200mhz_cycles                      
       [Counts the number of cycles that the uncore was running at a frequency
        greater than or equal to 1.2Ghz. Derived from unc_p_freq_band0_cycles.
        Unit: uncore_pcu]
  unc_p_freq_ge_1200mhz_transitions                 
       [Counts the number of times that the uncore transitioned to a frequency
        greater than or equal to 1.2Ghz. Derived from unc_p_freq_band0_cycles.
        Unit: uncore_pcu]
  unc_p_freq_ge_2000mhz_cycles                      
       [Counts the number of cycles that the uncore was running at a frequency
        greater than or equal to 2Ghz. Derived from unc_p_freq_band1_cycles.
        Unit: uncore_pcu]
  unc_p_freq_ge_2000mhz_transitions                 
       [Counts the number of times that the uncore transitioned to a frequency
        greater than or equal to 2Ghz. Derived from unc_p_freq_band1_cycles.
        Unit: uncore_pcu]
  unc_p_freq_ge_3000mhz_cycles                      
       [Counts the number of cycles that the uncore was running at a frequency
        greater than or equal to 3Ghz. Derived from unc_p_freq_band2_cycles.
        Unit: uncore_pcu]
  unc_p_freq_ge_3000mhz_transitions                 
       [Counts the number of cycles that the uncore transitioned to a
        frequency greater than or equal to 3Ghz. Derived from
        unc_p_freq_band2_cycles. Unit: uncore_pcu]
  unc_p_freq_ge_4000mhz_cycles                      
       [Counts the number of cycles that the uncore was running at a frequency
        greater than or equal to 4Ghz. Derived from unc_p_freq_band3_cycles.
        Unit: uncore_pcu]
  unc_p_freq_ge_4000mhz_transitions                 
       [Counts the number of cycles that the uncore transitioned to a
        frequency greater than or equal to 4Ghz. Derived from
        unc_p_freq_band3_cycles. Unit: uncore_pcu]
  unc_p_freq_max_current_cycles                     
       [Counts the number of cycles when current is the upper limit on
        frequency. Derived from unc_p_freq_max_current_cycles. Unit:
        uncore_pcu]
  unc_p_freq_max_limit_thermal_cycles               
       [Counts the number of cycles when temperature is the upper limit on
        frequency. Derived from unc_p_freq_max_limit_thermal_cycles. Unit:
        uncore_pcu]
  unc_p_freq_max_os_cycles                          
       [Counts the number of cycles when the OS is the upper limit on
        frequency. Derived from unc_p_freq_max_os_cycles. Unit: uncore_pcu]
  unc_p_freq_max_power_cycles                       
       [Counts the number of cycles when power is the upper limit on
        frequency. Derived from unc_p_freq_max_power_cycles. Unit: uncore_pcu]
  unc_p_freq_trans_cycles                           
       [Cycles spent changing Frequency. Derived from unc_p_freq_trans_cycles.
        Unit: uncore_pcu]
  unc_p_power_state_occupancy.cores_c0              
       [This is an occupancy event that tracks the number of cores that are in
        C0. It can be used by itself to get the average number of cores in C0,
        with threshholding to generate histograms, or with other PCU events
        and occupancy triggering to capture other details. Derived from
        unc_p_power_state_occupancy.cores_c0. Unit: uncore_pcu]
  unc_p_power_state_occupancy.cores_c3              
       [This is an occupancy event that tracks the number of cores that are in
        C3. It can be used by itself to get the average number of cores in C0,
        with threshholding to generate histograms, or with other PCU events
        and occupancy triggering to capture other details. Derived from
        unc_p_power_state_occupancy.cores_c3. Unit: uncore_pcu]
  unc_p_power_state_occupancy.cores_c6              
       [This is an occupancy event that tracks the number of cores that are in
        C6. It can be used by itself to get the average number of cores in C0,
        with threshholding to generate histograms, or with other PCU events .
        Derived from unc_p_power_state_occupancy.cores_c6. Unit: uncore_pcu]
  unc_p_prochot_external_cycles                     
       [Counts the number of cycles that we are in external PROCHOT mode. This
        mode is triggered when a sensor off the die determines that something
        off-die (like DRAM) is too hot and must throttle to avoid damaging the
        chip. Derived from unc_p_prochot_external_cycles. Unit: uncore_pcu]

virtual memory:
  dtlb_load_misses.miss_causes_a_walk               
       [Load misses in all DTLB levels that cause page walks]
  dtlb_load_misses.stlb_hit                         
       [Load operations that miss the first DTLB level but hit the second and
        do not cause page walks]
  dtlb_load_misses.walk_completed                   
       [Load misses at all DTLB levels that cause completed page walks]
  dtlb_load_misses.walk_duration                    
       [Cycles when PMH is busy with page walks]
  dtlb_store_misses.miss_causes_a_walk              
       [Store misses in all DTLB levels that cause page walks]
  dtlb_store_misses.stlb_hit                        
       [Store operations that miss the first TLB level but hit the second and
        do not cause page walks]
  dtlb_store_misses.walk_completed                  
       [Store misses in all DTLB levels that cause completed page walks]
  dtlb_store_misses.walk_duration                   
       [Cycles when PMH is busy with page walks]
  ept.walk_cycles                                   
       [Cycle count for an Extended Page table walk. The Extended Page
        Directory cache is used by Virtual Machine operating systems while the
        guest operating systems use the standard TLB caches]
  itlb.itlb_flush                                   
       [Flushing of the Instruction TLB (ITLB) pages, includes 4k/2M/4M pages]
  itlb_misses.miss_causes_a_walk                    
       [Misses at all ITLB levels that cause page walks]
  itlb_misses.stlb_hit                              
       [Operations that miss the first ITLB level but hit the second and do
        not cause any page walks]
  itlb_misses.walk_completed                        
       [Misses in all ITLB levels that cause completed page walks]
  itlb_misses.walk_duration                         
       [Cycles when PMH is busy with page walks]
  tlb_flush.dtlb_thread                             
       [DTLB flush attempts of the thread-specific entries]
  tlb_flush.stlb_any                                
       [STLB flush attempts]
  rNNN                                               [Raw hardware event descriptor]
  cpu/t1=v1[,t2=v2,t3 ...]/modifier                  [Raw hardware event descriptor]
  mem:<addr>[/len][:access]                          [Hardware breakpoint]
perf list

  agu_bypass_cancel.count                     [This event counts executed load operations with all the following traits: 1. addressing of the format [base + offset], 2. the offset is between 1 and 2047, 3. the address specified in the base register is in one page and the address [base+offset] is in an]
  arith.fpu_div                               [This event counts the number of the divide operations executed.]
  arith.fpu_div_active                        [Cycles when divider is busy executing divide operations]
  baclears.any                                [Counts the total number when the front end is resteered, mainly when the BPU cannot provide a correct prediction and this is corrected by other branch handling mechanisms at the front end.]
  br_inst_exec.all_branches                   [Speculative and retired  branches]
  br_inst_exec.all_conditional                [Speculative and retired macro-conditional branches]
  br_inst_exec.all_direct_jmp                 [Speculative and retired macro-unconditional branches excluding calls and indirects]
  br_inst_exec.all_direct_near_call           [Speculative and retired direct near calls]
  br_inst_exec.all_indirect_jump_non_call_ret  [Speculative and retired indirect branches excluding calls and returns]
  br_inst_exec.all_indirect_near_return       [Speculative and retired indirect return branches.]
  br_inst_exec.nontaken_conditional           [Not taken macro-conditional branches]
  br_inst_exec.taken_conditional              [Taken speculative and retired macro-conditional branches]
  br_inst_exec.taken_direct_jump              [Taken speculative and retired macro-conditional branch instructions excluding calls and indirects]
  br_inst_exec.taken_direct_near_call         [Taken speculative and retired direct near calls]
  br_inst_exec.taken_indirect_jump_non_call_ret  [Taken speculative and retired indirect branches excluding calls and returns]
  br_inst_exec.taken_indirect_near_call       [Taken speculative and retired indirect calls]
  br_inst_exec.taken_indirect_near_return     [Taken speculative and retired indirect branches with return mnemonic]
  br_inst_retired.all_branches                [All (macro) branch instructions retired.]
  br_inst_retired.all_branches_pebs           [All (macro) branch instructions retired. (Precise Event - PEBS) (Uses PEBS)]
  br_inst_retired.conditional                 [Conditional branch instructions retired. (Supports PEBS)]
  br_inst_retired.far_branch                  [Far branch instructions retired.]
  br_inst_retired.near_call                   [Direct and indirect near call instructions retired. (Supports PEBS)]
  br_inst_retired.near_return                 [Return instructions retired. (Supports PEBS)]
  br_inst_retired.near_taken                  [Taken branch instructions retired. (Supports PEBS)]
  br_inst_retired.not_taken                   [Not taken branch instructions retired.]
  br_misp_exec.all_branches                   [Speculative and retired mispredicted macro conditional branches]
  br_misp_exec.all_conditional                [Speculative and retired mispredicted macro conditional branches]
  br_misp_exec.all_direct_near_call           [Speculative and retired mispredicted direct near calls]
  br_misp_exec.all_indirect_jump_non_call_ret  [Mispredicted indirect branches excluding calls and returns]
  br_misp_exec.nontaken_conditional           [Not taken speculative and retired mispredicted macro conditional branches]
  br_misp_exec.taken_conditional              [Taken speculative and retired mispredicted macro conditional branches]
  br_misp_exec.taken_direct_near_call         [Taken speculative and retired mispredicted direct near calls]
  br_misp_exec.taken_indirect_jump_non_call_ret  [Taken speculative and retired mispredicted indirect branches excluding calls and returns]
  br_misp_exec.taken_indirect_near_call       [Taken speculative and retired mispredicted indirect calls]
  br_misp_exec.taken_return_near              [Taken speculative and retired mispredicted indirect branches with return mnemonic]
  br_misp_retired.all_branches                [All mispredicted macro branch instructions retired.]
  br_misp_retired.all_branches_pebs           [Mispredicted macro branch instructions retired. (Precise Event - PEBS) (Uses PEBS)]
  br_misp_retired.conditional                 [Mispredicted conditional branch instructions retired. (Supports PEBS)]
  br_misp_retired.near_call                   [Direct and indirect mispredicted near call instructions retired. (Supports PEBS)]
  br_misp_retired.not_taken                   [Mispredicted not taken branch instructions retired. (Supports PEBS)]
  br_misp_retired.taken                       [Mispredicted taken branch instructions retired. (Supports PEBS)]
  cpl_cycles.ring0                            [Unhalted core cycles when the thread is in ring 0]
  cpl_cycles.ring0_trans                      [Number of intervals between processor halts while thread is in ring 0]
  cpl_cycles.ring123                          [Unhalted core cycles when thread is in rings 1, 2, or 3]
  cpu_clk_thread_unhalted.one_thread_active   [Count XClk pulses when this thread is unhalted and the other is halted.]
  cpu_clk_thread_unhalted.ref_xclk            [Reference cycles when the thread is unhalted (counts at 100 MHz rate)]
  cpu_clk_thread_unhalted.ref_xclk_any        [Reference cycles when the at least one thread on the physical core is unhalted (counts at 100 MHz rate)]
  cpu_clk_unhalted.ref_tsc                    [This event counts the number of reference cycles when the core is not in a halt state. The core enters the halt state when it is running the HLT instruction or the MWAIT instruction. This event is not affected by core frequency changes (for example, P states, TM2 transitions) but has the same incrementing frequency as the time stamp counter. This event can approximate elapsed time while the core was not in a halt state. This event has a constant ratio with the CPU_CLK_UNHALTED.REF_XCLK event. It is counted on a dedicated fixed counter, leaving the four (eight when Hyperthreading is disabled) programmable counters available for other events.]
  cpu_clk_unhalted.thread                     [This event counts the number of core cycles while the thread is not in a halt state. The thread enters the halt state when it is running the HLT instruction. This event is a component in many key event ratios. The core frequency may change from time to time due to transitions associated with Enhanced Intel SpeedStep Technology or TM2. For this reason this event may have a changing ratio with regards to time. When the core frequency is constant, this event can approximate elapsed time while the core was not in the halt state. It is counted on a dedicated fixed counter, leaving the four (eight when Hyperthreading is disabled) programmable counters available for other events.]
  cpu_clk_unhalted.thread_any                 [Core cycles when at least one thread on the physical core is not in halt state]
  cpu_clk_unhalted.thread_p                   [Thread cycles when thread is not in halt state]
  cpu_clk_unhalted.thread_p_any               [Core cycles when at least one thread on the physical core is not in halt state]
  cycle_activity.cycles_l1d_pending           [Each cycle there was a miss-pending demand load this thread, increment by 1. Note this is in DCU and connected to Umask 1. Miss Pending demand load should be deduced by OR-ing increment bits of DCACHE_MISS_PEND.PENDING.]
  cycle_activity.cycles_l2_pending            [Each cycle there was a MLC-miss pending demand load this thread (i.e. Non-completed valid SQ entry allocated for demand load and waiting for Uncore), increment by 1. Note this is in MLC and connected to Umask 0.]
  cycle_activity.cycles_no_dispatch           [Each cycle there was no dispatch for this thread, increment by 1. Note this is connect to Umask 2. No dispatch can be deduced from the UOPS_EXECUTED event.]
  cycle_activity.stalls_l1d_pending           [Each cycle there was a miss-pending demand load this thread and no uops dispatched, increment by 1. Note this is in DCU and connected to Umask 1 and 2. Miss Pending demand load should be deduced by OR-ing increment bits of DCACHE_MISS_PEND.PENDING.]
  cycle_activity.stalls_l2_pending            [Each cycle there was a MLC-miss pending demand load and no uops dispatched on this thread (i.e. Non-completed valid SQ entry allocated for demand load and waiting for Uncore), increment by 1. Note this is in MLC and connected to Umask 0 and 2.]
  dsb2mite_switches.count                     [Decode Stream Buffer (DSB)-to-MITE switches]
  dsb2mite_switches.penalty_cycles            [This event counts the cycles attributed to a switch from the Decoded Stream Buffer (DSB), which holds decoded instructions, to the legacy decode pipeline.  It excludes cycles when the back-end cannot  accept new micro-ops.  The penalty for these switches is potentially several cycles of instruction starvation, where no micro-ops are delivered to the back-end.]
  dsb_fill.all_cancel                         [Cases of cancelling valid Decode Stream Buffer (DSB) fill not because of exceeding way limit]
  dsb_fill.exceed_dsb_lines                   [Cycles when Decode Stream Buffer (DSB) fill encounter more than 3 Decode Stream Buffer (DSB) lines]
  dsb_fill.other_cancel                       [Cases of cancelling valid DSB fill not because of exceeding way limit]
  dtlb_load_misses.miss_causes_a_walk         [Load misses in all DTLB levels that cause page walks]
  dtlb_load_misses.stlb_hit                   [This event counts load operations that miss the first DTLB level but hit the second and do not cause any page walks. The penalty in this case is approximately 7 cycles.]
  dtlb_load_misses.walk_completed             [Load misses at all DTLB levels that cause completed page walks]
  dtlb_load_misses.walk_duration              [This event counts cycles when the  page miss handler (PMH) is servicing page walks caused by DTLB load misses.]
  dtlb_store_misses.miss_causes_a_walk        [Store misses in all DTLB levels that cause page walks]
  dtlb_store_misses.stlb_hit                  [Store operations that miss the first TLB level but hit the second and do not cause page walks]
  dtlb_store_misses.walk_completed            [Store misses in all DTLB levels that cause completed page walks]
  dtlb_store_misses.walk_duration             [Cycles when PMH is busy with page walks]
  ept.walk_cycles                             [Cycle count for an Extended Page table walk.  The Extended Page Directory cache is used by Virtual Machine operating systems while the guest operating systems use the standard TLB caches.]
  fp_assist.any                               [Cycles with any input/output SSE or FP assist]
  fp_assist.simd_input                        [Number of SIMD FP assists due to input values]
  fp_assist.simd_output                       [Number of SIMD FP assists due to Output values]
  fp_assist.x87_input                         [Number of X87 assists due to input value.]
  fp_assist.x87_output                        [Number of X87 assists due to output value.]
  fp_comp_ops_exe.sse_packed_double           [Number of SSE* or AVX-128 FP Computational packed double-precision uops issued this cycle]
  fp_comp_ops_exe.sse_packed_single           [Number of SSE* or AVX-128 FP Computational packed single-precision uops issued this cycle]
  fp_comp_ops_exe.sse_scalar_double           [Number of SSE* or AVX-128 FP Computational scalar double-precision uops issued this cycle]
  fp_comp_ops_exe.sse_scalar_single           [Number of SSE* or AVX-128 FP Computational scalar single-precision uops issued this cycle]
  fp_comp_ops_exe.x87                         [Number of FP Computational Uops Executed this cycle. The number of FADD, FSUB, FCOM, FMULs, integer MULsand IMULs, FDIVs, FPREMs, FSQRTS, integer DIVs, and IDIVs. This event does not distinguish an FADD used in the middle of a transcendental flow from a s]
  hw_pre_req.dl1_miss                         [Hardware Prefetch requests that miss the L1D cache. This accounts for both L1 streamer and IP-based (IPP) HW prefetchers. A request is being counted each time it access the cache & miss it, including if a block is applicable or if hit the Fill Buffer for]
  icache.hit                                  [Number of Instruction Cache, Streaming Buffer and Victim Cache Reads. both cacheable and noncacheable, including UC fetches]
  icache.misses                               [This event counts the number of instruction cache, streaming buffer and victim cache misses. Counting includes unchacheable accesses.]
  idq.all_dsb_cycles_4_uops                   [Cycles Decode Stream Buffer (DSB) is delivering 4 Uops]
  idq.all_dsb_cycles_any_uops                 [Cycles Decode Stream Buffer (DSB) is delivering any Uop]
  idq.all_mite_cycles_4_uops                  [Cycles MITE is delivering 4 Uops]
  idq.all_mite_cycles_any_uops                [Cycles MITE is delivering any Uop]
  idq.dsb_cycles                              [Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from Decode Stream Buffer (DSB) path]
  idq.dsb_uops                                [Uops delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path]
  idq.empty                                   [Instruction Decode Queue (IDQ) empty cycles]
  idq.mite_all_uops                           [Uops delivered to Instruction Decode Queue (IDQ) from MITE path]
  idq.mite_cycles                             [Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from MITE path]
  idq.mite_uops                               [Uops delivered to Instruction Decode Queue (IDQ) from MITE path]
  idq.ms_cycles                               [This event counts cycles during which the microcode sequencer assisted the front-end in delivering uops.  Microcode assists are used for complex instructions or scenarios that can't be handled by the standard decoder.  Using other instructions, if possible, will usually improve performance.  See the Intel? 64 and IA-32 Architectures Optimization Reference Manual for more information.]
  idq.ms_dsb_cycles                           [Cycles when uops initiated by Decode Stream Buffer (DSB) are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy]
  idq.ms_dsb_occur                            [Deliveries to Instruction Decode Queue (IDQ) initiated by Decode Stream Buffer (DSB) while Microcode Sequenser (MS) is busy]
  idq.ms_dsb_uops                             [Uops initiated by Decode Stream Buffer (DSB) that are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy]
  idq.ms_mite_uops                            [Uops initiated by MITE and delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy]
  idq.ms_switches                             [Number of switches from DSB (Decode Stream Buffer) or MITE (legacy decode pipeline) to the Microcode Sequencer]
  idq.ms_uops                                 [Uops delivered to Instruction Decode Queue (IDQ) while Microcode Sequenser (MS) is busy]
  idq_uops_not_delivered.core                 [This event counts the number of uops not delivered to the back-end per cycle, per thread, when the back-end was not stalled.  In the ideal case 4 uops can be delivered each cycle.  The event counts the undelivered uops - so if 3 were delivered in one cycle, the counter would be incremented by 1 for that cycle (4 - 3). If the back-end is stalled, the count for this event is not incremented even when uops were not delivered, because the back-end would not have been able to accept them.  This event is used in determining the front-end bound category of the top-down pipeline slots characterization.]
  idq_uops_not_delivered.cycles_0_uops_deliv.core  [Cycles per thread when 4 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled]
  idq_uops_not_delivered.cycles_fe_was_ok     [Counts cycles FE delivered 4 uops or Resource Allocation Table (RAT) was stalling FE.]
  idq_uops_not_delivered.cycles_ge_1_uop_deliv.core  [Cycles when 1 or more uops were delivered to the by the front end.]
  idq_uops_not_delivered.cycles_le_1_uop_deliv.core  [Cycles per thread when 3 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled]
  idq_uops_not_delivered.cycles_le_2_uop_deliv.core  [Cycles with less than 2 uops delivered by the front end]
  idq_uops_not_delivered.cycles_le_3_uop_deliv.core  [Cycles with less than 3 uops delivered by the front end]
  ild_stall.iq_full                           [Stall cycles because IQ is full]
  ild_stall.lcp                               [Stalls caused by changing prefix length of the instruction.]
  inst_retired.any                            [This event counts the number of instructions retired from execution. For instructions that consist of multiple micro-ops, this event counts the retirement of the last micro-op of the instruction. Counting continues during hardware interrupts, traps, and inside interrupt handlers.]
  inst_retired.any_p                          [Number of instructions retired. General Counter   - architectural event]
  inst_retired.prec_dist                      [Instructions retired. (Precise Event - PEBS) (Uses PEBS)]
  insts_written_to_iq.insts                   [Valid instructions written to IQ per cycle]
  int_misc.rat_stall_cycles                   [Cycles when Resource Allocation Table (RAT) external stall is sent to Instruction Decode Queue (IDQ) for the thread]
  int_misc.recovery_cycles                    [Number of cycles waiting for the checkpoints in Resource Allocation Table (RAT) to be recovered after Nuke due to all other cases except JEClear (e.g. whenever a ucode assist is needed like SSE exception, memory disambiguation, etc...)]
  int_misc.recovery_cycles_any                [Core cycles the allocator was stalled due to recovery from earlier clear event for any thread running on the physical core (e.g. misprediction or memory nuke)]
  int_misc.recovery_stalls_count              [Number of occurences waiting for the checkpoints in Resource Allocation Table (RAT) to be recovered after Nuke due to all other cases except JEClear (e.g. whenever a ucode assist is needed like SSE exception, memory disambiguation, etc...)]
  itlb.itlb_flush                             [Flushing of the Instruction TLB (ITLB) pages, includes 4k/2M/4M pages.]
  itlb_misses.miss_causes_a_walk              [Misses at all ITLB levels that cause page walks]
  itlb_misses.stlb_hit                        [Operations that miss the first ITLB level but hit the second and do not cause any page walks]
  itlb_misses.walk_completed                  [Misses in all ITLB levels that cause completed page walks]
  itlb_misses.walk_duration                   [This event count cycles when Page Miss Handler (PMH) is servicing page walks caused by ITLB misses.]
  l1d.all_m_replacement                       [Cache lines in M state evicted out of L1D due to Snoop HitM or dirty line replacement]
  l1d.allocated_in_m                          [Allocated L1D data cache lines in M state]
  l1d.eviction                                [L1D data cache lines in M state evicted due to replacement]
  l1d.replacement                             [This event counts L1D data line replacements.  Replacements occur when a new line is brought into the cache, causing eviction of a line loaded earlier.]
  l1d_blocks.bank_conflict_cycles             [Cycles when dispatched loads are cancelled due to L1D bank conflicts with other load ports]
  l1d_pend_miss.fb_full                       [Cycles a demand request was blocked due to Fill Buffers inavailability]
  l1d_pend_miss.pending                       [L1D miss oustandings duration in cycles]
  l1d_pend_miss.pending_cycles                [Cycles with L1D load Misses outstanding.]
  l1d_pend_miss.pending_cycles_any            [Cycles with L1D load Misses outstanding from any thread on physical core]
  l2_l1d_wb_rqsts.all                         [Not rejected writebacks from L1D to L2 cache lines in any state.]
  l2_l1d_wb_rqsts.hit_e                       [Not rejected writebacks from L1D to L2 cache lines in E state]
  l2_l1d_wb_rqsts.hit_m                       [Not rejected writebacks from L1D to L2 cache lines in M state]
  l2_l1d_wb_rqsts.hit_s                       [Not rejected writebacks from L1D to L2 cache lines in S state]
  l2_l1d_wb_rqsts.miss                        [Count the number of modified Lines evicted from L1 and missed L2. (Non-rejected WBs from the DCU.)]
  l2_lines_in.all                             [This event counts the number of L2 cache lines brought into the L2 cache.  Lines are filled into the L2 cache when there was an L2 miss.]
  l2_lines_in.e                               [L2 cache lines in E state filling L2]
  l2_lines_in.i                               [L2 cache lines in I state filling L2]
  l2_lines_in.s                               [L2 cache lines in S state filling L2]
  l2_lines_out.demand_clean                   [Clean L2 cache lines evicted by demand]
  l2_lines_out.demand_dirty                   [Dirty L2 cache lines evicted by demand]
  l2_lines_out.dirty_all                      [Dirty L2 cache lines filling the L2]
  l2_lines_out.pf_clean                       [Clean L2 cache lines evicted by L2 prefetch]
  l2_lines_out.pf_dirty                       [Dirty L2 cache lines evicted by L2 prefetch]
  l2_rqsts.all_code_rd                        [L2 code requests]
  l2_rqsts.all_demand_data_rd                 [Demand Data Read requests]
  l2_rqsts.all_pf                             [Requests from L2 hardware prefetchers]
  l2_rqsts.all_rfo                            [RFO requests to L2 cache]
  l2_rqsts.code_rd_hit                        [L2 cache hits when fetching instructions, code reads.]
  l2_rqsts.code_rd_miss                       [L2 cache misses when fetching instructions]
  l2_rqsts.demand_data_rd_hit                 [Demand Data Read requests that hit L2 cache]
  l2_rqsts.pf_hit                             [Requests from the L2 hardware prefetchers that hit L2 cache]
  l2_rqsts.pf_miss                            [Requests from the L2 hardware prefetchers that miss L2 cache]
  l2_rqsts.rfo_hit                            [RFO requests that hit L2 cache]
  l2_rqsts.rfo_miss                           [RFO requests that miss L2 cache]
  l2_store_lock_rqsts.all                     [RFOs that access cache lines in any state]
  l2_store_lock_rqsts.hit_e                   [RFOs that hit cache lines in E state]
  l2_store_lock_rqsts.hit_m                   [RFOs that hit cache lines in M state]
  l2_store_lock_rqsts.miss                    [RFOs that miss cache lines]
  l2_trans.all_pf                             [L2 or LLC HW prefetches that access L2 cache]
  l2_trans.all_requests                       [Transactions accessing L2 pipe]
  l2_trans.code_rd                            [L2 cache accesses when fetching instructions]
  l2_trans.demand_data_rd                     [Demand Data Read requests that access L2 cache]
  l2_trans.l1d_wb                             [L1D writebacks that access L2 cache]
  l2_trans.l2_fill                            [L2 fill requests that access L2 cache]
  l2_trans.l2_wb                              [L2 writebacks that access L2 cache]
  l2_trans.rfo                                [RFO requests that access L2 cache]
  ld_blocks.all_block                         [Number of cases where any load ends up with a valid block-code written to the load buffer (including blocks due to Memory Order Buffer (MOB), Data Cache Unit (DCU), TLB, but load has no DCU miss)]
  ld_blocks.data_unknown                      [Loads delayed due to SB blocks, preceding store operations with known addresses but unknown data]
  ld_blocks.no_sr                             [This event counts the number of times that split load operations are temporarily blocked because all resources for handling the split accesses are in use.]
  ld_blocks.store_forward                     [This event counts loads that followed a store to the same address, where the data could not be forwarded inside the pipeline from the store to the load.  The most common reason why store forwarding would be blocked is when a load's address range overlaps with a preceeding smaller uncompleted store.  See the table of not supported store forwards in the Intel? 64 and IA-32 Architectures Optimization Reference Manual.  The penalty for blocked store forwarding is that the load must wait for the store to complete before it can be issued.]
  ld_blocks_partial.address_alias             [Aliasing occurs when a load is issued after a store and their memory addresses are offset by 4K.  This event counts the number of loads that aliased with a preceding store, resulting in an extended address check in the pipeline.  The enhanced address check typically has a performance penalty of 5 cycles.]
  ld_blocks_partial.all_sta_block             [This event counts the number of times that load operations are temporarily blocked because of older stores, with addresses that are not yet known. A load operation may incur more than one block of this type.]
  load_hit_pre.hw_pf                          [Not software-prefetch load dispatches that hit FB allocated for hardware prefetch]
  load_hit_pre.sw_pf                          [Not software-prefetch load dispatches that hit FB allocated for software prefetch]
  lock_cycles.cache_lock_duration             [Cycles when L1D is locked]
  lock_cycles.split_lock_uc_lock_duration     [Cycles when L1 and L2 are locked due to UC or split lock]
  longest_lat_cache.miss                      [Core-originated cacheable demand requests missed LLC]
  longest_lat_cache.reference                 [Core-originated cacheable demand requests that refer to LLC]
  lsd.cycles_4_uops                           [Cycles 4 Uops delivered by the LSD, but didn't come from the decoder]
  lsd.cycles_active                           [Cycles Uops delivered by the LSD, but didn't come from the decoder]
  lsd.uops                                    [Number of Uops delivered by the LSD.]
  machine_clears.count                        [Number of machine clears (nukes) of any type.]
  machine_clears.maskmov                      [Maskmov false fault - counts number of time ucode passes through Maskmov flow due to instruction's mask being 0 while the flow was completed without raising a fault.]
  machine_clears.memory_ordering              [This event counts the number of memory ordering Machine Clears detected. Memory Ordering Machine Clears can result from memory disambiguation, external snoops, or cross SMT-HW-thread snoop (stores) hitting load buffers.  Machine clears can have a significant performance impact if they are happening frequently.]
  machine_clears.smc                          [This event is incremented when self-modifying code (SMC) is detected, which causes a machine clear.  Machine clears can have a significant performance impact if they are happening frequently.]
  mem_load_uops_llc_hit_retired.xsnp_hit      [This event counts retired load uops that hit in the last-level cache (L3) and were found in a non-modified state in a neighboring core's private cache (same package).  Since the last level cache is inclusive, hits to the L3 may require snooping the private L2 caches of any cores on the same socket that have the line.  In this case, a snoop was required, and another L2 had the line in a non-modified state.]
  mem_load_uops_llc_hit_retired.xsnp_hitm     [This event counts retired load uops that hit in the last-level cache (L3) and were found in a non-modified state in a neighboring core's private cache (same package).  Since the last level cache is inclusive, hits to the L3 may require snooping the private L2 caches of any cores on the same socket that have the line.  In this case, a snoop was required, and another L2 had the line in a modified state, so the line had to be invalidated in that L2 cache and transferred to the requesting L2.]
  mem_load_uops_llc_hit_retired.xsnp_miss     [Retired load uops which data sources were LLC hit and cross-core snoop missed in on-pkg core cache.]
  mem_load_uops_llc_hit_retired.xsnp_none     [Retired load uops which data sources were hits in LLC without snoops required.]
  mem_load_uops_llc_miss_retired.local_dram   [Data from local DRAM either Snoop not needed or Snoop Miss (RspI)]
  mem_load_uops_llc_miss_retired.remote_dram  [Data from remote DRAM either Snoop not needed or Snoop Miss (RspI)]
  mem_load_uops_retired.hit_lfb               [Retired load uops which data sources were load uops missed L1 but hit FB due to preceding miss to the same cache line with data not ready. (Supports PEBS)]
  mem_load_uops_retired.l1_hit                [Retired load uops with L1 cache hits as data sources. (Supports PEBS)]
  mem_load_uops_retired.l2_hit                [Retired load uops with L2 cache hits as data sources. (Supports PEBS)]
  mem_load_uops_retired.llc_hit               [This event counts retired load uops that hit in the last-level (L3) cache without snoops required.]
  mem_load_uops_retired.llc_miss              [Miss in last-level (L3) cache. Excludes Unknown data-source.]
  mem_trans_retired.load_latency_gt_128       [Loads with latency value being above 128 (Uses PEBS)]
  mem_trans_retired.load_latency_gt_16        [Loads with latency value being above 16 (Uses PEBS)]
  mem_trans_retired.load_latency_gt_256       [Loads with latency value being above 256 (Uses PEBS)]
  mem_trans_retired.load_latency_gt_32        [Loads with latency value being above 32 (Uses PEBS)]
  mem_trans_retired.load_latency_gt_4         [Loads with latency value being above 4 (Uses PEBS)]
  mem_trans_retired.load_latency_gt_512       [Loads with latency value being above 512 (Uses PEBS)]
  mem_trans_retired.load_latency_gt_64        [Loads with latency value being above 64 (Uses PEBS)]
  mem_trans_retired.load_latency_gt_8         [Loads with latency value being above 8 (Uses PEBS)]
  mem_trans_retired.precise_store             [Sample stores and collect precise store operation via PEBS record. PMC3 only. (Precise Event - PEBS) (Uses PEBS)]
  mem_uops_retired.all_loads                  [This event counts the number of load uops retired (Supports PEBS)]
  mem_uops_retired.all_stores                 [This event counts the number of store uops retired. (Supports PEBS)]
  mem_uops_retired.lock_loads                 [Retired load uops with locked access. (Supports PEBS)]
  mem_uops_retired.split_loads                [This event counts line-splitted load uops retired to the architected path. A line split is across 64B cache-line which includes a page split (4K). (Supports PEBS)]
  mem_uops_retired.split_stores               [This event counts line-splitted store uops retired to the architected path. A line split is across 64B cache-line which includes a page split (4K). (Supports PEBS)]
  mem_uops_retired.stlb_miss_loads            [Retired load uops that miss the STLB. (Supports PEBS)]
  mem_uops_retired.stlb_miss_stores           [Retired store uops that miss the STLB. (Supports PEBS)]
  misalign_mem_ref.loads                      [Speculative cache line split load uops dispatched to L1 cache]
  misalign_mem_ref.stores                     [Speculative cache line split STA uops dispatched to L1 cache]
  offcore_requests.all_data_rd                [Demand and prefetch data reads]
  offcore_requests.demand_code_rd             [Cacheable and noncachaeble code read requests]
  offcore_requests.demand_data_rd             [Demand Data Read requests sent to uncore]
  offcore_requests.demand_rfo                 [Demand RFO requests including regular RFOs, locks, ItoM]
  offcore_requests_buffer.sq_full             [Cases when offcore requests buffer cannot take more entries for core]
  offcore_requests_outstanding.all_data_rd    [Offcore outstanding cacheable Core Data Read transactions in SuperQueue (SQ), queue to uncore]
  offcore_requests_outstanding.cycles_with_data_rd  [Cycles when offcore outstanding cacheable Core Data Read transactions are present in SuperQueue (SQ), queue to uncore]
  offcore_requests_outstanding.cycles_with_demand_data_rd  [Cycles when offcore outstanding Demand Data Read transactions are present in SuperQueue (SQ), queue to uncore]
  offcore_requests_outstanding.cycles_with_demand_rfo  [Offcore outstanding demand rfo reads transactions in SuperQueue (SQ), queue to uncore, every cycle]
  offcore_requests_outstanding.demand_data_rd  [Offcore outstanding Demand Data Read transactions in uncore queue.]
  offcore_requests_outstanding.demand_data_rd_c6  [Cycles with at least 6 offcore outstanding Demand Data Read transactions in uncore queue]
  offcore_requests_outstanding.demand_rfo     [Offcore outstanding RFO store transactions in SuperQueue (SQ), queue to uncore]
  offcore_response.all_data_rd.any_response   [Counts all demand & prefetch data reads]
  offcore_response.all_data_rd.llc_hit.hit_other_core_no_fwd  [Counts demand & prefetch data reads that hit in the LLC and the snoops to sibling cores hit in either E/S state and the line is not forwarded]
  offcore_response.all_data_rd.llc_hit.hitm_other_core  [Counts demand & prefetch data reads that hit in the LLC and the snoop to one of the sibling cores hits the line in M state and the line is forwarded]
  offcore_response.all_data_rd.llc_hit.no_snoop_needed  [Counts demand & prefetch data reads that hit in the LLC and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores]
  offcore_response.all_data_rd.llc_hit.snoop_miss  [Counts demand & prefetch data reads that hit in the LLC and sibling core snoop returned a clean response]
  offcore_response.all_demand_mlc_pref_reads.llc_miss.any_response  [This event counts all LLC misses for all demand and L2 prefetches. LLC prefetches are excluded.]
  offcore_response.all_demand_mlc_pref_reads.llc_miss.local_dram  [Counts all local dram accesses for all demand and L2 prefetches. LLC prefetches are excluded.]
  offcore_response.all_demand_mlc_pref_reads.llc_miss.remote_hitm_hit_forward  [This event counts all remote cache-to-cache transfers (includes HITM and HIT-Forward) for all demand and L2 prefetches. LLC prefetches are excluded.]
  offcore_response.all_pf_data_rd.llc_hit.any_response  [Counts all prefetch data reads that hit the LLC]
  offcore_response.all_pf_data_rd.llc_hit.hit_other_core_no_fwd  [Counts prefetch data reads that hit in the LLC and the snoops to sibling cores hit in either E/S state and the line is not forwarded]
  offcore_response.all_pf_data_rd.llc_hit.hitm_other_core  [Counts prefetch data reads that hit in the LLC and the snoop to one of the sibling cores hits the line in M state and the line is forwarded]
  offcore_response.all_pf_data_rd.llc_hit.no_snoop_needed  [Counts prefetch data reads that hit in the LLC and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores]
  offcore_response.all_pf_data_rd.llc_hit.snoop_miss  [Counts prefetch data reads that hit in the LLC and sibling core snoop returned a clean response]
  offcore_response.all_reads.any_response     [Counts all data/code/rfo references (demand & prefetch)]
  offcore_response.all_reads.llc_hit.any_response  [Counts all data/code/rfo reads (demand & prefetch) that hit in the LLC]
  offcore_response.all_reads.llc_hit.hit_other_core_no_fwd  [Counts all data/code/rfo reads (demand & prefetch) that hit in the LLC and the snoops to sibling cores hit in either E/S state and the line is not forwarded]
  offcore_response.all_reads.llc_hit.hitm_other_core  [Counts all data/code/rfo reads (demand & prefetch) that hit in the LLC and the snoop to one of the sibling cores hits the line in M state and the line is forwarded]
  offcore_response.all_reads.llc_hit.no_snoop_needed  [Counts all data/code/rfo reads (demand & prefetch) that hit in the LLC and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores]
  offcore_response.all_reads.llc_hit.snoop_miss  [Counts all data/code/rfo reads (demand & prefetch) that hit in the LLC and sibling core snoop returned a clean response]
  offcore_response.all_rfo.any_response       [Counts all demand & prefetch prefetch RFOs]
  offcore_response.corewb.any_response        [Counts prefetch (that bring data to LLC only) data reads that hit in the LLC and the snoops sent to sibling cores return clean response]
  offcore_response.demand_code_rd.any_response  [Counts all demand code reads]
  offcore_response.demand_code_rd.llc_hit.any_response  [Counts all demand code reads that hit in the LLC]
  offcore_response.demand_code_rd.llc_miss.any_response  [Counts all demand code reads that miss the LLC]
  offcore_response.demand_code_rd.llc_miss.local_dram  [Counts all demand code reads that miss the LLC  and the data returned from local dram]
  offcore_response.demand_code_rd.llc_miss.remote_dram  [Counts all demand code reads that miss the LLC  and the data returned from remote dram]
  offcore_response.demand_code_rd.llc_miss.remote_hit_forward  [Counts all demand code reads that miss the LLC  and the data forwarded from remote cache]
  offcore_response.demand_code_rd.llc_miss.remote_hitm  [Counts all demand code reads that miss the LLC  the data is found in M state in remote cache and forwarded from there]
  offcore_response.demand_data_rd.any_response  [Counts all demand data reads]
  offcore_response.demand_data_rd.llc_hit.any_response  [Counts all demand data reads that hit in the LLC]
  offcore_response.demand_data_rd.llc_hit.hit_other_core_no_fwd  [Counts demand data reads that hit in the LLC and the snoops to sibling cores hit in either E/S state and the line is not forwarded]
  offcore_response.demand_data_rd.llc_hit.hitm_other_core  [Counts demand data reads that hit in the LLC and the snoop to one of the sibling cores hits the line in M state and the line is forwarded]
  offcore_response.demand_data_rd.llc_hit.no_snoop_needed  [Counts demand data reads that hit in the LLC and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores]
  offcore_response.demand_data_rd.llc_hit.snoop_miss  [Counts demand data reads that hit in the LLC and sibling core snoop returned a clean response]
  offcore_response.demand_data_rd.llc_miss.any_dram  [Counts demand data reads that miss the LLC  and the data returned from remote & local dram]
  offcore_response.demand_data_rd.llc_miss.any_response  [Counts demand data reads that miss in the LLC]
  offcore_response.demand_data_rd.llc_miss.local_dram  [Counts demand data reads that miss the LLC  and the data returned from local dram]
  offcore_response.demand_data_rd.llc_miss.remote_dram  [Counts demand data reads that miss the LLC  and the data returned from remote dram]
  offcore_response.demand_data_rd.llc_miss.remote_hit_forward  [Counts demand data reads that miss the LLC  and the data forwarded from remote cache]
  offcore_response.demand_data_rd.llc_miss.remote_hitm  [Counts demand data reads that miss the LLC  the data is found in M state in remote cache and forwarded from there]
  offcore_response.demand_rfo.any_response    [Counts all demand rfo's]
  offcore_response.other.lru_hints            [Counts L2 hints sent to LLC to keep a line from being evicted out of the core caches]
  offcore_response.other.portio_mmio_uc       [Counts miscellaneous accesses that include port i/o, MMIO and uncacheable memory accesses]
  offcore_response.pf_l2_code_rd.llc_hit.any_response  [Counts all prefetch (that bring data to L2) code reads that hit in the LLC]
  offcore_response.pf_l2_code_rd.llc_miss.any_response  [Counts all prefetch (that bring data to L2) code reads that miss the LLC  and the data returned from remote & local dram]
  offcore_response.pf_l2_data_rd.llc_hit.any_response  [Counts prefetch (that bring data to L2) data reads that hit in the LLC]
  offcore_response.pf_l2_data_rd.llc_hit.hit_other_core_no_fwd  [Counts prefetch (that bring data to L2) data reads that hit in the LLC and the snoops to sibling cores hit in either E/S state and the line is not forwarded]
  offcore_response.pf_l2_data_rd.llc_hit.hitm_other_core  [Counts prefetch (that bring data to L2) data reads that hit in the LLC and the snoop to one of the sibling cores hits the line in M state and the line is forwarded]
  offcore_response.pf_l2_data_rd.llc_hit.no_snoop_needed  [Counts prefetch (that bring data to L2) data reads that hit in the LLC and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores]
  offcore_response.pf_l2_data_rd.llc_hit.snoop_miss  [Counts prefetch (that bring data to L2) data reads that hit in the LLC and the snoops sent to sibling cores return clean response]
  offcore_response.pf_l2_data_rd.llc_miss.any_dram  [Counts prefetch (that bring data to L2) data reads that miss the LLC  and the data returned from remote & local dram]
  offcore_response.pf_l2_data_rd.llc_miss.any_response  [Counts prefetch (that bring data to L2) data reads that miss in the LLC]
  offcore_response.pf_l2_data_rd.llc_miss.local_dram  [Counts prefetch (that bring data to L2) data reads that miss the LLC  and the data returned from local dram]
  offcore_response.pf_l2_data_rd.llc_miss.remote_dram  [Counts prefetch (that bring data to L2) data reads  that miss the LLC  and the data returned from remote dram]
  offcore_response.pf_l2_data_rd.llc_miss.remote_hit_forward  [Counts prefetch (that bring data to L2) data reads that miss the LLC  and the data forwarded from remote cache]
  offcore_response.pf_l2_data_rd.llc_miss.remote_hitm  [Counts prefetch (that bring data to L2) data reads that miss the LLC  the data is found in M state in remote cache and forwarded from there]
  offcore_response.pf_llc_code_rd.llc_hit.any_response  [Counts all prefetch (that bring data to LLC only) code reads that hit in the LLC]
  offcore_response.pf_llc_code_rd.llc_miss.any_response  [Counts all prefetch (that bring data to LLC only) code reads that miss in the LLC]
  offcore_response.pf_llc_data_rd.llc_hit.any_response  [Counts prefetch (that bring data to LLC only) data reads that hit in the LLC]
  offcore_response.pf_llc_data_rd.llc_hit.hit_other_core_no_fwd  [Counts prefetch (that bring data to LLC only) data reads that hit in the LLC and the snoops to sibling cores hit in either E/S state and the line is not forwarded]
  offcore_response.pf_llc_data_rd.llc_hit.hitm_other_core  [Counts prefetch (that bring data to LLC only) data reads that hit in the LLC and the snoop to one of the sibling cores hits the line in M state and the line is forwarded]
  offcore_response.pf_llc_data_rd.llc_hit.no_snoop_needed  [Counts prefetch (that bring data to LLC only) data reads that hit in the LLC and sibling core snoops are not needed as either the core-valid bit is not set or the shared line is present in multiple cores]
  offcore_response.pf_llc_data_rd.llc_hit.snoop_miss  [Counts prefetch (that bring data to LLC only) data reads that hit in the LLC and the snoops sent to sibling cores return clean response]
  offcore_response.pf_llc_data_rd.llc_miss.any_response  [Counts prefetch (that bring data to LLC only) data reads that hit in the LLC and the snoops sent to sibling cores return clean response]
  offcore_response.split_lock_uc_lock.any_response  [Counts requests where the address of an atomic lock instruction spans a cache line boundary or the lock instruction is executed on uncacheable address]
  offcore_response.streaming_stores.any_response  [Counts non-temporal stores]
  other_assists.avx_store                     [Number of GSSE memory assist for stores. GSSE microcode assist is being invoked whenever the hardware is unable to properly handle GSSE-256b operations.]
  other_assists.avx_to_sse                    [Number of transitions from AVX-256 to legacy SSE when penalty applicable.]
  other_assists.itlb_miss_retired             [Retired instructions experiencing ITLB misses.]
  other_assists.sse_to_avx                    [Number of transitions from SSE to AVX-256 when penalty applicable.]
  partial_rat_stalls.flags_merge_uop          [Increments the number of flags-merge uops in flight each cycle.]
  partial_rat_stalls.flags_merge_uop_cycles   [This event counts the number of cycles spent executing performance-sensitive flags-merging uops. For example, shift CL (merge_arith_flags). For more details, See the Intel? 64 and IA-32 Architectures Optimization Reference Manual.]
  partial_rat_stalls.mul_single_uop           [Multiply packed/scalar single precision uops allocated]
  partial_rat_stalls.slow_lea_window          [This event counts the number of cycles with at least one slow LEA uop being allocated. A uop is generally considered as slow LEA if it has three sources (for example, two sources and immediate) regardless of whether it is a result of LEA instruction or not. Examples of the slow LEA uop are or uops with base, index, and offset source operands using base and index reqisters, where base is EBR/RBP/R13, using RIP relative or 16-bit addressing modes. See the Intel? 64 and IA-32 Architectures Optimization Reference Manual for more details about slow LEA instructions.]
  resource_stalls.any                         [Resource-related stall cycles]
  resource_stalls.lb                          [Counts the cycles of stall due to lack of load buffers.]
  resource_stalls.lb_sb                       [Resource stalls due to load or store buffers all being in use]
  resource_stalls.mem_rs                      [Resource stalls due to memory buffers or Reservation Station (RS) being fully utilized]
  resource_stalls.ooo_rsrc                    [Resource stalls due to Rob being full, FCSW, MXCSR and OTHER]
  resource_stalls.rob                         [Cycles stalled due to re-order buffer full.]
  resource_stalls.rs                          [Cycles stalled due to no eligible RS entry available.]
  resource_stalls.sb                          [Cycles stalled due to no store buffers available. (not including draining form sync).]
  resource_stalls2.all_fl_empty               [Cycles with either free list is empty]
  resource_stalls2.all_prf_control            [Resource stalls2 control structures full for physical registers]
  resource_stalls2.bob_full                   [Cycles when Allocator is stalled if BOB is full and new branch needs it]
  resource_stalls2.ooo_rsrc                   [Resource stalls out of order resources full]
  rob_misc_events.lbr_inserts                 [Count cases of saving new LBR]
  rs_events.empty_cycles                      [Cycles when Reservation Station (RS) is empty for the thread]
  rs_events.empty_end                         [Counts end of periods where the Reservation Station (RS) was empty. Could be useful to precisely locate Frontend Latency Bound issues.]
  simd_fp_256.packed_double                   [number of AVX-256 Computational FP double precision uops issued this cycle]
  simd_fp_256.packed_single                   [number of GSSE-256 Computational FP single precision uops issued this cycle]
  sq_misc.split_lock                          [Split locks in SQ]
  tlb_flush.dtlb_thread                       [DTLB flush attempts of the thread-specific entries]
  tlb_flush.stlb_any                          [STLB flush attempts]
  uops_dispatched.core                        [Uops dispatched from any thread]
  uops_dispatched.thread                      [Uops dispatched per thread]
  uops_dispatched_port.port_0                 [Cycles per thread when uops are dispatched to port 0]
  uops_dispatched_port.port_0_core            [Cycles per core when uops are dispatched to port 0]
  uops_dispatched_port.port_1                 [Cycles per thread when uops are dispatched to port 1]
  uops_dispatched_port.port_1_core            [Cycles per core when uops are dispatched to port 1]
  uops_dispatched_port.port_2                 [Cycles per thread when load or STA uops are dispatched to port 2]
  uops_dispatched_port.port_2_core            [Cycles per core when load or STA uops are dispatched to port 2]
  uops_dispatched_port.port_3                 [Cycles per thread when load or STA uops are dispatched to port 3]
  uops_dispatched_port.port_3_core            [Cycles per core when load or STA uops are dispatched to port 3]
  uops_dispatched_port.port_4                 [Cycles per thread when uops are dispatched to port 4]
  uops_dispatched_port.port_4_core            [Cycles per core when uops are dispatched to port 4]
  uops_dispatched_port.port_5                 [Cycles per thread when uops are dispatched to port 5]
  uops_dispatched_port.port_5_core            [Cycles per core when uops are dispatched to port 5]
  uops_executed.core_cycles_ge_1              [Cycles at least 1 micro-op is executed from any thread on physical core]
  uops_executed.core_cycles_ge_2              [Cycles at least 2 micro-op is executed from any thread on physical core]
  uops_executed.core_cycles_ge_3              [Cycles at least 3 micro-op is executed from any thread on physical core]
  uops_executed.core_cycles_ge_4              [Cycles at least 4 micro-op is executed from any thread on physical core]
  uops_executed.core_cycles_none              [Cycles with no micro-ops executed from any thread on physical core]
  uops_issued.any                             [This event counts the number of Uops issued by the front-end of the pipeilne to the back-end.]
  uops_issued.core_stall_cycles               [Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for all threads]
  uops_issued.stall_cycles                    [Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for the thread]
  uops_retired.all                            [This event counts the number of micro-ops retired. (Supports PEBS)]
  uops_retired.core_stall_cycles              [Cycles without actually retired uops.]
  uops_retired.retire_slots                   [This event counts the number of retirement slots used each cycle.  There are potentially 4 slots that can be used each cycle - meaning, 4 micro-ops or 4 instructions could retire each cycle.  This event is used in determining the 'Retiring' category of the Top-Down pipeline slots characterization. (Supports PEBS)]
  uops_retired.stall_cycles                   [Cycles without actually retired uops.]
  uops_retired.total_cycles                   [Cycles with less than 10 actually retired uops.]
  unc_c_clockticks                            [tbd]
  unc_c_counter0_occupancy                    [Since occupancy counts can only be captured in the Cbo's 0 counter, this event allows a user to capture occupancy related information by filtering the Cb0 occupancy count captured in Counter 0.   The filtering available is found in the control register - threshold, invert and edge detect.   E.g. setting threshold to 1 can effectively monitor how many cycles the monitored queue has an entry.]
  unc_c_ismq_drd_miss_occ                     [tbd]
  unc_c_llc_lookup.data_read                  [Counts the number of times the LLC was accessed - this includes code, data, prefetches and hints coming from L2.  This has numerous filters available.  Note the non-standard filtering equation.  This event will count requests that lookup the cache multiple times with multiple increments.  One must ALWAYS set filter mask bit 0 and select a state or states to match.  Otherwise, the event will count nothing.   CBoGlCtrl[22:18] bits correspond to [FMESI] state.]
  unc_c_llc_lookup.nid                        [Counts the number of times the LLC was accessed - this includes code, data, prefetches and hints coming from L2.  This has numerous filters available.  Note the non-standard filtering equation.  This event will count requests that lookup the cache multiple times with multiple increments.  One must ALWAYS set filter mask bit 0 and select a state or states to match.  Otherwise, the event will count nothing.   CBoGlCtrl[22:18] bits correspond to [FMESI] state.]
  unc_c_llc_lookup.remote_snoop               [Counts the number of times the LLC was accessed - this includes code, data, prefetches and hints coming from L2.  This has numerous filters available.  Note the non-standard filtering equation.  This event will count requests that lookup the cache multiple times with multiple increments.  One must ALWAYS set filter mask bit 0 and select a state or states to match.  Otherwise, the event will count nothing.   CBoGlCtrl[22:18] bits correspond to [FMESI] state.]
  unc_c_llc_lookup.write                      [Counts the number of times the LLC was accessed - this includes code, data, prefetches and hints coming from L2.  This has numerous filters available.  Note the non-standard filtering equation.  This event will count requests that lookup the cache multiple times with multiple increments.  One must ALWAYS set filter mask bit 0 and select a state or states to match.  Otherwise, the event will count nothing.   CBoGlCtrl[22:18] bits correspond to [FMESI] state.]
  unc_c_llc_victims.e_state                   [Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.]
  unc_c_llc_victims.m_state                   [Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.]
  unc_c_llc_victims.miss                      [Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.]
  unc_c_llc_victims.nid                       [Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.]
  unc_c_llc_victims.s_state                   [Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.]
  unc_c_misc.rfo_hit_s                        [Miscellaneous events in the Cbo.]
  unc_c_misc.rspi_was_fse                     [Miscellaneous events in the Cbo.]
  unc_c_misc.started                          [Miscellaneous events in the Cbo.]
  unc_c_misc.wc_aliasing                      [Miscellaneous events in the Cbo.]
  unc_c_ring_ad_used.down_even                [Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.]
  unc_c_ring_ad_used.down_odd                 [Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.]
  unc_c_ring_ad_used.up_even                  [Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.]
  unc_c_ring_ad_used.up_odd                   [Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.]
  unc_c_ring_ak_used.down_even                [Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.]
  unc_c_ring_ak_used.down_odd                 [Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.]
  unc_c_ring_ak_used.up_even                  [Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.]
  unc_c_ring_ak_used.up_odd                   [Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.]
  unc_c_ring_bl_used.down_even                [Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from  the ring stop.We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.]
  unc_c_ring_bl_used.down_odd                 [Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from  the ring stop.We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.]
  unc_c_ring_bl_used.up_even                  [Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from  the ring stop.We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.]
  unc_c_ring_bl_used.up_odd                   [Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from  the ring stop.We really have two rings in JKT -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the 'UP' direction is on the clockwise ring and 'DN' is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.]
  unc_c_ring_bounces.ak_core                  [tbd]
  unc_c_ring_bounces.bl_core                  [tbd]
  unc_c_ring_bounces.iv_core                  [tbd]
  unc_c_ring_iv_used.any                      [Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  There is only 1 IV ring in JKT.  Therefore, if one wants to monitor the 'Even' ring, they should select both UP_EVEN and DN_EVEN.  To monitor the 'Odd' ring, they should select both UP_ODD and DN_ODD.]
  unc_c_ring_sink_starved.ad_cache            [tbd]
  unc_c_ring_sink_starved.ak_core             [tbd]
  unc_c_ring_sink_starved.bl_core             [tbd]
  unc_c_ring_sink_starved.iv_core             [tbd]
  unc_c_ring_src_thrtl                        [tbd]
  unc_c_rxr_ext_starved.ipq                   [Counts cycles in external starvation.  This occurs when one of the ingress queues is being starved by the other queues.]
  unc_c_rxr_ext_starved.irq                   [Counts cycles in external starvation.  This occurs when one of the ingress queues is being starved by the other queues.]
  unc_c_rxr_ext_starved.ismq                  [Counts cycles in external starvation.  This occurs when one of the ingress queues is being starved by the other queues.]
  unc_c_rxr_ext_starved.ismq_bids             [Counts cycles in external starvation.  This occurs when one of the ingress queues is being starved by the other queues.]
  unc_c_rxr_inserts.ipq                       [Counts number of allocations per cycle into the specified Ingress queue.]
  unc_c_rxr_inserts.irq                       [Counts number of allocations per cycle into the specified Ingress queue.]
  unc_c_rxr_inserts.irq_rejected              [Counts number of allocations per cycle into the specified Ingress queue.]
  unc_c_rxr_inserts.vfifo                     [Counts number of allocations per cycle into the specified Ingress queue.]
  unc_c_rxr_int_starved.ipq                   [Counts cycles in internal starvation.  This occurs when one (or more) of the entries in the ingress queue are being starved out by other entries in that queue.]
  unc_c_rxr_int_starved.irq                   [Counts cycles in internal starvation.  This occurs when one (or more) of the entries in the ingress queue are being starved out by other entries in that queue.]
  unc_c_rxr_int_starved.ismq                  [Counts cycles in internal starvation.  This occurs when one (or more) of the entries in the ingress queue are being starved out by other entries in that queue.]
  unc_c_rxr_ipq_retry.addr_conflict           [Number of times a snoop (probe) request had to retry.  Filters exist to cover some of the common cases retries.]
  unc_c_rxr_ipq_retry.any                     [Number of times a snoop (probe) request had to retry.  Filters exist to cover some of the common cases retries.]
  unc_c_rxr_ipq_retry.full                    [Number of times a snoop (probe) request had to retry.  Filters exist to cover some of the common cases retries.]
  unc_c_rxr_ipq_retry.qpi_credits             [Number of times a snoop (probe) request had to retry.  Filters exist to cover some of the common cases retries.]
  unc_c_rxr_irq_retry.addr_conflict           [tbd]
  unc_c_rxr_irq_retry.any                     [tbd]
  unc_c_rxr_irq_retry.full                    [tbd]
  unc_c_rxr_irq_retry.qpi_credits             [tbd]
  unc_c_rxr_irq_retry.rtid                    [tbd]
  unc_c_rxr_ismq_retry.any                    [Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.]
  unc_c_rxr_ismq_retry.full                   [Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.]
  unc_c_rxr_ismq_retry.iio_credits            [Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.]
  unc_c_rxr_ismq_retry.qpi_credits            [Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.]
  unc_c_rxr_ismq_retry.rtid                   [Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.]
  unc_c_rxr_occupancy.ipq                     [Counts number of entries in the specified Ingress queue in each cycle.]
  unc_c_rxr_occupancy.irq                     [Counts number of entries in the specified Ingress queue in each cycle.]
  unc_c_rxr_occupancy.irq_rejected            [Counts number of entries in the specified Ingress queue in each cycle.]
  unc_c_rxr_occupancy.vfifo                   [Counts number of entries in the specified Ingress queue in each cycle.]
  unc_c_tor_inserts.eviction                  [Counts the number of entries successfuly inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).]
  unc_c_tor_inserts.miss_all                  [Counts the number of entries successfuly inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).]
  unc_c_tor_inserts.miss_opcode               [Counts the number of entries successfuly inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).]
  unc_c_tor_inserts.nid_all                   [Counts the number of entries successfuly inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).]
  unc_c_tor_inserts.nid_eviction              [Counts the number of entries successfuly inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).]
  unc_c_tor_inserts.nid_miss_all              [Counts the number of entries successfuly inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).]
  unc_c_tor_inserts.nid_miss_opcode           [Counts the number of entries successfuly inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).]
  unc_c_tor_inserts.nid_opcode                [Counts the number of entries successfuly inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).]
  unc_c_tor_inserts.nid_wb                    [Counts the number of entries successfuly inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).]
  unc_c_tor_inserts.opcode                    [Counts the number of entries successfuly inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).]
  unc_c_tor_inserts.wb                        [Counts the number of entries successfuly inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).]
  unc_c_tor_occupancy.all                     [For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)]
  unc_c_tor_occupancy.eviction                [For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)]
  unc_c_tor_occupancy.miss_all                [For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)]
  unc_c_tor_occupancy.miss_opcode             [For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)]
  unc_c_tor_occupancy.nid_all                 [For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)]
  unc_c_tor_occupancy.nid_eviction            [For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)]
  unc_c_tor_occupancy.nid_miss_all            [For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)]
  unc_c_tor_occupancy.nid_miss_opcode         [For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)]
  unc_c_tor_occupancy.nid_opcode              [For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)]
  unc_c_tor_occupancy.opcode                  [For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select 'MISS_OPC_MATCH' and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)]
  unc_c_txr_ads_used                          [tbd]
  unc_c_txr_inserts.ad_cache                  [Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.]
  unc_c_txr_inserts.ad_core                   [Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.]
  unc_c_txr_inserts.ak_cache                  [Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.]
  unc_c_txr_inserts.ak_core                   [Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.]
  unc_c_txr_inserts.bl_cache                  [Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.]
  unc_c_txr_inserts.bl_core                   [Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.]
  unc_c_txr_inserts.iv_cache                  [Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.]
  unc_c_txr_starved.ak                        [Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time.]
  unc_c_txr_starved.bl                        [Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time.]
  unc_h_addr_opc_match.filt                   [tbd]
  unc_h_bypass_imc.not_taken                  [Counts the number of times when the HA was able to bypass was attempted.  This is a latency optimization for situations when there is light loadings on the memory subsystem.  This can be filted by when the bypass was taken and when it was not.]
  unc_h_bypass_imc.taken                      [Counts the number of times when the HA was able to bypass was attempted.  This is a latency optimization for situations when there is light loadings on the memory subsystem.  This can be filted by when the bypass was taken and when it was not.]
  unc_h_clockticks                            [Counts the number of uclks in the HA.  This will be slightly different than the count in the Ubox because of enable/freeze delays.  The HA is on the other side of the die from the fixed Ubox uclk counter, so the drift could be somewhat larger than in units that are closer like the QPI Agent.]
  unc_h_conflict_cycles.conflict              [tbd]
  unc_h_conflict_cycles.no_conflict           [tbd]
  unc_h_direct2core_count                     [Number of Direct2Core messages sent]
  unc_h_direct2core_cycles_disabled           [Number of cycles in which Direct2Core was disabled]
  unc_h_direct2core_txn_override              [Number of Reads where Direct2Core overridden]
  unc_h_directory_lookup.no_snp               [Counts the number of transactions that looked up the directory.  Can be filtered by requests that had to snoop and those that did not have to.]
  unc_h_directory_lookup.snp                  [Counts the number of transactions that looked up the directory.  Can be filtered by requests that had to snoop and those that did not have to.]
  unc_h_directory_update.any                  [Counts the number of directory updates that were required.  These result in writes to the memory controller.  This can be filtered by directory sets and directory clears.]
  unc_h_directory_update.clear                [Counts the number of directory updates that were required.  These result in writes to the memory controller.  This can be filtered by directory sets and directory clears.]
  unc_h_directory_update.set                  [Counts the number of directory updates that were required.  These result in writes to the memory controller.  This can be filtered by directory sets and directory clears.]
  unc_h_igr_no_credit_cycles.ad_qpi0          [Counts the number of cycles when the HA does not have credits to send messages to the QPI Agent.  This can be filtered by the different credit pools and the different links.]
  unc_h_igr_no_credit_cycles.ad_qpi1          [Counts the number of cycles when the HA does not have credits to send messages to the QPI Agent.  This can be filtered by the different credit pools and the different links.]
  unc_h_igr_no_credit_cycles.bl_qpi0          [Counts the number of cycles when the HA does not have credits to send messages to the QPI Agent.  This can be filtered by the different credit pools and the different links.]
  unc_h_igr_no_credit_cycles.bl_qpi1          [Counts the number of cycles when the HA does not have credits to send messages to the QPI Agent.  This can be filtered by the different credit pools and the different links.]
  unc_h_imc_retry                             [tbd]
  unc_h_imc_writes.all                        [Counts the total number of full line writes issued from the HA into the memory controller.  This counts for all four channels.  It can be filtered by full/partial and ISOCH/non-ISOCH.]
  unc_h_imc_writes.full                       [Counts the total number of full line writes issued from the HA into the memory controller.  This counts for all four channels.  It can be filtered by full/partial and ISOCH/non-ISOCH.]
  unc_h_imc_writes.full_isoch                 [Counts the total number of full line writes issued from the HA into the memory controller.  This counts for all four channels.  It can be filtered by full/partial and ISOCH/non-ISOCH.]
  unc_h_imc_writes.partial                    [Counts the total number of full line writes issued from the HA into the memory controller.  This counts for all four channels.  It can be filtered by full/partial and ISOCH/non-ISOCH.]
  unc_h_imc_writes.partial_isoch              [Counts the total number of full line writes issued from the HA into the memory controller.  This counts for all four channels.  It can be filtered by full/partial and ISOCH/non-ISOCH.]
  unc_h_requests.reads                        [Counts the total number of read requests made into the Home Agent. Reads include all read opcodes (including RFO).  Writes include all writes (streaming, evictions, HitM, etc).]
  unc_h_requests.writes                       [Counts the total number of read requests made into the Home Agent. Reads include all read opcodes (including RFO).  Writes include all writes (streaming, evictions, HitM, etc).]
  unc_h_ring_ad_used.ccw_even                 [Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_h_ring_ad_used.ccw_odd                  [Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_h_ring_ad_used.cw_even                  [Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_h_ring_ad_used.cw_odd                   [Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_h_ring_ak_used.ccw_even                 [Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_h_ring_ak_used.ccw_odd                  [Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_h_ring_ak_used.cw_even                  [Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_h_ring_ak_used.cw_odd                   [Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_h_ring_bl_used.ccw_even                 [Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_h_ring_bl_used.ccw_odd                  [Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_h_ring_bl_used.cw_even                  [Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_h_ring_bl_used.cw_odd                   [Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_h_rpq_cycles_no_reg_credits.chn0        [Counts the number of cycles when there are no 'regular' credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and 'special' requests such as ISOCH reads.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.]
  unc_h_rpq_cycles_no_reg_credits.chn1        [Counts the number of cycles when there are no 'regular' credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and 'special' requests such as ISOCH reads.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.]
  unc_h_rpq_cycles_no_reg_credits.chn2        [Counts the number of cycles when there are no 'regular' credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and 'special' requests such as ISOCH reads.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.]
  unc_h_rpq_cycles_no_reg_credits.chn3        [Counts the number of cycles when there are no 'regular' credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and 'special' requests such as ISOCH reads.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.]
  unc_h_rpq_cycles_no_spec_credits.chn0       [Counts the number of cycles when there are no 'special' credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and 'special' requests such as ISOCH reads.  This count only tracks the 'special' credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.]
  unc_h_rpq_cycles_no_spec_credits.chn1       [Counts the number of cycles when there are no 'special' credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and 'special' requests such as ISOCH reads.  This count only tracks the 'special' credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.]
  unc_h_rpq_cycles_no_spec_credits.chn2       [Counts the number of cycles when there are no 'special' credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and 'special' requests such as ISOCH reads.  This count only tracks the 'special' credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.]
  unc_h_rpq_cycles_no_spec_credits.chn3       [Counts the number of cycles when there are no 'special' credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and 'special' requests such as ISOCH reads.  This count only tracks the 'special' credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.]
  unc_h_tad_requests_g0.region0               [Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for 'Monroe' systems that use the TAD to enable individual channels to enter self-refresh to save power.]
  unc_h_tad_requests_g0.region1               [Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for 'Monroe' systems that use the TAD to enable individual channels to enter self-refresh to save power.]
  unc_h_tad_requests_g0.region2               [Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for 'Monroe' systems that use the TAD to enable individual channels to enter self-refresh to save power.]
  unc_h_tad_requests_g0.region3               [Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for 'Monroe' systems that use the TAD to enable individual channels to enter self-refresh to save power.]
  unc_h_tad_requests_g0.region4               [Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for 'Monroe' systems that use the TAD to enable individual channels to enter self-refresh to save power.]
  unc_h_tad_requests_g0.region5               [Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for 'Monroe' systems that use the TAD to enable individual channels to enter self-refresh to save power.]
  unc_h_tad_requests_g0.region6               [Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for 'Monroe' systems that use the TAD to enable individual channels to enter self-refresh to save power.]
  unc_h_tad_requests_g0.region7               [Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for 'Monroe' systems that use the TAD to enable individual channels to enter self-refresh to save power.]
  unc_h_tad_requests_g1.region10              [Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 8 to 10.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for 'Monroe' systems that use the TAD to enable individual channels to enter self-refresh to save power.]
  unc_h_tad_requests_g1.region11              [Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 8 to 10.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for 'Monroe' systems that use the TAD to enable individual channels to enter self-refresh to save power.]
  unc_h_tad_requests_g1.region8               [Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 8 to 10.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for 'Monroe' systems that use the TAD to enable individual channels to enter self-refresh to save power.]
  unc_h_tad_requests_g1.region9               [Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 8 to 10.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for 'Monroe' systems that use the TAD to enable individual channels to enter self-refresh to save power.]
  unc_h_tracker_inserts.all                   [Counts the number of allocations into the local HA tracker pool.  This can be used in conjunction with the occupancy accumulation event in order to calculate average latency.  One cannot filter between reads and writes.  HA trackers are allocated as soon as a request enters the HA and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring.]
  unc_h_txr_ad.ndr                            [Counts the number of outbound transactions on the AD ring.  This can be filtered by the NDR and SNP message classes.  See the filter descriptions for more details.]
  unc_h_txr_ad.snp                            [Counts the number of outbound transactions on the AD ring.  This can be filtered by the NDR and SNP message classes.  See the filter descriptions for more details.]
  unc_h_txr_ad_cycles_full.all                [AD Egress Full]
  unc_h_txr_ad_cycles_full.sched0             [AD Egress Full]
  unc_h_txr_ad_cycles_full.sched1             [AD Egress Full]
  unc_h_txr_ad_cycles_ne.all                  [AD Egress Not Empty]
  unc_h_txr_ad_cycles_ne.sched0               [AD Egress Not Empty]
  unc_h_txr_ad_cycles_ne.sched1               [AD Egress Not Empty]
  unc_h_txr_ad_inserts.all                    [AD Egress Allocations]
  unc_h_txr_ad_inserts.sched0                 [AD Egress Allocations]
  unc_h_txr_ad_inserts.sched1                 [AD Egress Allocations]
  unc_h_txr_ad_occupancy.all                  [AD Egress Occupancy]
  unc_h_txr_ad_occupancy.sched0               [AD Egress Occupancy]
  unc_h_txr_ad_occupancy.sched1               [AD Egress Occupancy]
  unc_h_txr_ak_cycles_full.all                [AK Egress Full]
  unc_h_txr_ak_cycles_full.sched0             [AK Egress Full]
  unc_h_txr_ak_cycles_full.sched1             [AK Egress Full]
  unc_h_txr_ak_cycles_ne.all                  [AK Egress Not Empty]
  unc_h_txr_ak_cycles_ne.sched0               [AK Egress Not Empty]
  unc_h_txr_ak_cycles_ne.sched1               [AK Egress Not Empty]
  unc_h_txr_ak_inserts.all                    [AK Egress Allocations]
  unc_h_txr_ak_inserts.sched0                 [AK Egress Allocations]
  unc_h_txr_ak_inserts.sched1                 [AK Egress Allocations]
  unc_h_txr_ak_ndr                            [Counts the number of outbound NDR transactions sent on the AK ring.  NDR stands for 'non-data response' and is generally used for completions that do not include data.  AK NDR is used for messages to the local socket.]
  unc_h_txr_ak_occupancy.all                  [AK Egress Occupancy]
  unc_h_txr_ak_occupancy.sched0               [AK Egress Occupancy]
  unc_h_txr_ak_occupancy.sched1               [AK Egress Occupancy]
  unc_h_txr_bl.drs_cache                      [Counts the number of DRS messages sent out on the BL ring.   This can be filtered by the destination.]
  unc_h_txr_bl.drs_core                       [Counts the number of DRS messages sent out on the BL ring.   This can be filtered by the destination.]
  unc_h_txr_bl.drs_qpi                        [Counts the number of DRS messages sent out on the BL ring.   This can be filtered by the destination.]
  unc_h_txr_bl_cycles_full.all                [BL Egress Full]
  unc_h_txr_bl_cycles_full.sched0             [BL Egress Full]
  unc_h_txr_bl_cycles_full.sched1             [BL Egress Full]
  unc_h_txr_bl_cycles_ne.all                  [BL Egress Not Empty]
  unc_h_txr_bl_cycles_ne.sched0               [BL Egress Not Empty]
  unc_h_txr_bl_cycles_ne.sched1               [BL Egress Not Empty]
  unc_h_txr_bl_inserts.all                    [BL Egress Allocations]
  unc_h_txr_bl_inserts.sched0                 [BL Egress Allocations]
  unc_h_txr_bl_inserts.sched1                 [BL Egress Allocations]
  unc_h_txr_bl_occupancy.all                  [BL Egress Occupancy]
  unc_h_txr_bl_occupancy.sched0               [BL Egress Occupancy]
  unc_h_txr_bl_occupancy.sched1               [BL Egress Occupancy]
  unc_h_wpq_cycles_no_reg_credits.chn0        [Counts the number of cycles when there are no 'regular' credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and 'special' requests such as ISOCH writes.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.]
  unc_h_wpq_cycles_no_reg_credits.chn1        [Counts the number of cycles when there are no 'regular' credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and 'special' requests such as ISOCH writes.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.]
  unc_h_wpq_cycles_no_reg_credits.chn2        [Counts the number of cycles when there are no 'regular' credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and 'special' requests such as ISOCH writes.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.]
  unc_h_wpq_cycles_no_reg_credits.chn3        [Counts the number of cycles when there are no 'regular' credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and 'special' requests such as ISOCH writes.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.]
  unc_h_wpq_cycles_no_spec_credits.chn0       [Counts the number of cycles when there are no 'special' credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and 'special' requests such as ISOCH writes.  This count only tracks the 'special' credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.]
  unc_h_wpq_cycles_no_spec_credits.chn1       [Counts the number of cycles when there are no 'special' credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and 'special' requests such as ISOCH writes.  This count only tracks the 'special' credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.]
  unc_h_wpq_cycles_no_spec_credits.chn2       [Counts the number of cycles when there are no 'special' credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and 'special' requests such as ISOCH writes.  This count only tracks the 'special' credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.]
  unc_h_wpq_cycles_no_spec_credits.chn3       [Counts the number of cycles when there are no 'special' credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and 'special' requests such as ISOCH writes.  This count only tracks the 'special' credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.]
  unc_i_address_match.merge_count             [Counts the number of times when an inbound write (from a device to memory or another device) had an address match with another request in the write cache.]
  unc_i_address_match.stall_count             [Counts the number of times when an inbound write (from a device to memory or another device) had an address match with another request in the write cache.]
  unc_i_cache_ack_pending_occupancy.any       [Accumulates the number of writes that have acquired ownership but have not yet returned their data to the uncore.  These writes are generally queued up in the switch trying to get to the head of their queues so that they can post their data.  The queue occuapancy increments when the ACK is received, and decrements when either the data is returned OR a tickle is received and ownership is released.  Note that a single tickle can result in multiple decrements.]
  unc_i_cache_ack_pending_occupancy.source    [Accumulates the number of writes that have acquired ownership but have not yet returned their data to the uncore.  These writes are generally queued up in the switch trying to get to the head of their queues so that they can post their data.  The queue occuapancy increments when the ACK is received, and decrements when either the data is returned OR a tickle is received and ownership is released.  Note that a single tickle can result in multiple decrements.]
  unc_i_cache_own_occupancy.any               [Accumulates the number of writes (and write prefetches) that are outstanding in the uncore trying to acquire ownership in each cycle.  This can be used with the write transaction count to calculate the average write latency in the uncore.  The occupancy increments when a write request is issued, and decrements when the data is returned.]
  unc_i_cache_own_occupancy.source            [Accumulates the number of writes (and write prefetches) that are outstanding in the uncore trying to acquire ownership in each cycle.  This can be used with the write transaction count to calculate the average write latency in the uncore.  The occupancy increments when a write request is issued, and decrements when the data is returned.]
  unc_i_cache_read_occupancy.any              [Accumulates the number of reads that are outstanding in the uncore in each cycle.  This can be used with the read transaction count to calculate the average read latency in the uncore.  The occupancy increments when a read request is issued, and decrements when the data is returned.]
  unc_i_cache_read_occupancy.source           [Accumulates the number of reads that are outstanding in the uncore in each cycle.  This can be used with the read transaction count to calculate the average read latency in the uncore.  The occupancy increments when a read request is issued, and decrements when the data is returned.]
  unc_i_cache_total_occupancy.any             [Accumulates the number of reads and writes that are outstanding in the uncore in each cycle.  This is effectively the sum of the READ_OCCUPANCY and WRITE_OCCUPANCY events.]
  unc_i_cache_total_occupancy.source          [Accumulates the number of reads and writes that are outstanding in the uncore in each cycle.  This is effectively the sum of the READ_OCCUPANCY and WRITE_OCCUPANCY events.]
  unc_i_cache_write_occupancy.any             [Accumulates the number of writes (and write prefetches)  that are outstanding in the uncore in each cycle.  This can be used with the transaction count event to calculate the average latency in the uncore.  The occupancy increments when the ownership fetch/prefetch is issued, and decrements the data is returned to the uncore.]
  unc_i_cache_write_occupancy.source          [Accumulates the number of writes (and write prefetches)  that are outstanding in the uncore in each cycle.  This can be used with the transaction count event to calculate the average latency in the uncore.  The occupancy increments when the ownership fetch/prefetch is issued, and decrements the data is returned to the uncore.]
  unc_i_clockticks                            [Number of clocks in the IRP.]
  unc_i_rxr_ak_cycles_full                    [Counts the number of cycles when the AK Ingress is full.  This queue is where the IRP receives responses from R2PCIe (the ring).]
  unc_i_rxr_ak_inserts                        [Counts the number of allocations into the AK Ingress.  This queue is where the IRP receives responses from R2PCIe (the ring).]
  unc_i_rxr_ak_occupancy                      [Accumulates the occupancy of the AK Ingress in each cycles.  This queue is where the IRP receives responses from R2PCIe (the ring).]
  unc_i_rxr_bl_drs_cycles_full                [Counts the number of cycles when the BL Ingress is full.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.]
  unc_i_rxr_bl_drs_inserts                    [Counts the number of allocations into the BL Ingress.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.]
  unc_i_rxr_bl_drs_occupancy                  [Accumulates the occupancy of the BL Ingress in each cycles.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.]
  unc_i_rxr_bl_ncb_cycles_full                [Counts the number of cycles when the BL Ingress is full.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.]
  unc_i_rxr_bl_ncb_inserts                    [Counts the number of allocations into the BL Ingress.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.]
  unc_i_rxr_bl_ncb_occupancy                  [Accumulates the occupancy of the BL Ingress in each cycles.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.]
  unc_i_rxr_bl_ncs_cycles_full                [Counts the number of cycles when the BL Ingress is full.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.]
  unc_i_rxr_bl_ncs_inserts                    [Counts the number of allocations into the BL Ingress.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.]
  unc_i_rxr_bl_ncs_occupancy                  [Accumulates the occupancy of the BL Ingress in each cycles.  This queue is where the IRP receives data from R2PCIe (the ring).  It is used for data returns from read requets as well as outbound MMIO writes.]
  unc_i_tickles.lost_ownership                [Counts the number of tickles that are received.  This is for both explicit (from Cbo) and implicit (internal conflict) tickles.]
  unc_i_tickles.top_of_queue                  [Counts the number of tickles that are received.  This is for both explicit (from Cbo) and implicit (internal conflict) tickles.]
  unc_i_transactions.orderingq                [Counts the number of 'Inbound' transactions from the IRP to the Uncore.  This can be filtered based on request type in addition to the source queue.  Note the special filtering equation.  We do OR-reduction on the request type.  If the SOURCE bit is set, then we also do AND qualification based on the source portID.]
  unc_i_transactions.pd_prefetches            [Counts the number of 'Inbound' transactions from the IRP to the Uncore.  This can be filtered based on request type in addition to the source queue.  Note the special filtering equation.  We do OR-reduction on the request type.  If the SOURCE bit is set, then we also do AND qualification based on the source portID.]
  unc_i_transactions.reads                    [Counts the number of 'Inbound' transactions from the IRP to the Uncore.  This can be filtered based on request type in addition to the source queue.  Note the special filtering equation.  We do OR-reduction on the request type.  If the SOURCE bit is set, then we also do AND qualification based on the source portID.]
  unc_i_transactions.writes                   [Counts the number of 'Inbound' transactions from the IRP to the Uncore.  This can be filtered based on request type in addition to the source queue.  Note the special filtering equation.  We do OR-reduction on the request type.  If the SOURCE bit is set, then we also do AND qualification based on the source portID.]
  unc_i_txr_ad_stall_credit_cycles            [Counts the number times when it is not possible to issue a request to the R2PCIe because there are no AD Egress Credits available.]
  unc_i_txr_bl_stall_credit_cycles            [Counts the number times when it is not possible to issue data to the R2PCIe because there are no BL Egress Credits available.]
  unc_i_txr_data_inserts_ncb                  [Counts the number of requests issued to the switch (towards the devices).]
  unc_i_txr_data_inserts_ncs                  [Counts the number of requests issued to the switch (towards the devices).]
  unc_i_txr_request_occupancy                 [Accumultes the number of outstanding outbound requests from the IRP to the switch (towards the devices).  This can be used in conjuection with the allocations event in order to calculate average latency of outbound requests.]
  unc_i_write_ordering_stall_cycles           [Counts the number of cycles when there are pending write ACK's in the switch but the switch->IRP pipeline is not utilized.]
  unc_m_act_count                             [Counts the number of DRAM Activate commands sent on this channel.  Activate commands are issued to open up a page on the DRAM devices so that it can be read or written to with a CAS.  One can calculate the number of Page Misses by subtracting the number of Page Miss precharges from the number of Activates.]
  unc_m_cas_count.all                         [DRAM RD_CAS and WR_CAS Commands]
  unc_m_cas_count.rd                          [DRAM RD_CAS and WR_CAS Commands]
  unc_m_cas_count.rd_reg                      [DRAM RD_CAS and WR_CAS Commands]
  unc_m_cas_count.rd_underfill                [DRAM RD_CAS and WR_CAS Commands]
  unc_m_cas_count.wr                          [DRAM RD_CAS and WR_CAS Commands]
  unc_m_cas_count.wr_rmm                      [DRAM RD_CAS and WR_CAS Commands]
  unc_m_cas_count.wr_wmm                      [DRAM RD_CAS and WR_CAS Commands]
  unc_m_clockticks                            [Uncore Fixed Counter - uclks]
  unc_m_dram_pre_all                          [Counts the number of times that the precharge all command was sent.]
  unc_m_dram_refresh.high                     [Counts the number of refreshes issued.]
  unc_m_dram_refresh.panic                    [Counts the number of refreshes issued.]
  unc_m_ecc_correctable_errors                [Counts the number of ECC errors detected and corrected by the iMC on this channel.  This counter is only useful with ECC DRAM devices.  This count will increment one time for each correction regardless of the number of bits corrected.  The iMC can correct up to 4 bit errors in independent channel mode and 8 bit erros in lockstep mode.]
  unc_m_major_modes.isoch                     [Counts the total number of cycles spent in a major mode (selected by a filter) on the given channel.   Major modea are channel-wide, and not a per-rank (or dimm or bank) mode.]
  unc_m_major_modes.partial                   [Counts the total number of cycles spent in a major mode (selected by a filter) on the given channel.   Major modea are channel-wide, and not a per-rank (or dimm or bank) mode.]
  unc_m_major_modes.read                      [Counts the total number of cycles spent in a major mode (selected by a filter) on the given channel.   Major modea are channel-wide, and not a per-rank (or dimm or bank) mode.]
  unc_m_major_modes.write                     [Counts the total number of cycles spent in a major mode (selected by a filter) on the given channel.   Major modea are channel-wide, and not a per-rank (or dimm or bank) mode.]
  unc_m_power_channel_dlloff                  [Number of cycles when all the ranks in the channel are in CKE Slow (DLLOFF) mode.]
  unc_m_power_channel_ppd                     [Number of cycles when all the ranks in the channel are in PPD mode.  If IBT=off is enabled, then this can be used to count those cycles.  If it is not enabled, then this can count the number of cycles when that could have been taken advantage of.]
  unc_m_power_cke_cycles.rank0                [Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary).]
  unc_m_power_cke_cycles.rank1                [Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary).]
  unc_m_power_cke_cycles.rank2                [Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary).]
  unc_m_power_cke_cycles.rank3                [Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary).]
  unc_m_power_cke_cycles.rank4                [Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary).]
  unc_m_power_cke_cycles.rank5                [Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary).]
  unc_m_power_cke_cycles.rank6                [Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary).]
  unc_m_power_cke_cycles.rank7                [Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary).]
  unc_m_power_critical_throttle_cycles        [Counts the number of cycles when the iMC is in critical thermal throttling.  When this happens, all traffic is blocked.  This should be rare unless something bad is going on in the platform.  There is no filtering by rank for this event.]
  unc_m_power_self_refresh                    [Counts the number of cycles when the iMC is in self-refresh and the iMC still has a clock.  This happens in some package C-states.  For example, the PCU may ask the iMC to enter self-refresh even though some of the cores are still processing.  One use of this is for Monroe technology.  Self-refresh is required during package C3 and C6, but there is no clock in the iMC at this time, so it is not possible to count these cases.]
  unc_m_power_throttle_cycles.rank0           [Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1.]
  unc_m_power_throttle_cycles.rank1           [Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1.]
  unc_m_power_throttle_cycles.rank2           [Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1.]
  unc_m_power_throttle_cycles.rank3           [Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1.]
  unc_m_power_throttle_cycles.rank4           [Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1.]
  unc_m_power_throttle_cycles.rank5           [Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1.]
  unc_m_power_throttle_cycles.rank6           [Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1.]
  unc_m_power_throttle_cycles.rank7           [Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1.]
  unc_m_pre_count.page_close                  [Counts the number of DRAM Precharge commands sent on this channel.]
  unc_m_pre_count.page_miss                   [Counts the number of DRAM Precharge commands sent on this channel.]
  unc_m_preemption.rd_preempt_rd              [Counts the number of times a read in the iMC preempts another read or write.  Generally reads to an open page are issued ahead of requests to closed pages.  This improves the page hit rate of the system.  However, high priority requests can cause pages of active requests to be closed in order to get them out.  This will reduce the latency of the high-priority request at the expense of lower bandwidth and increased overall average latency.]
  unc_m_preemption.rd_preempt_wr              [Counts the number of times a read in the iMC preempts another read or write.  Generally reads to an open page are issued ahead of requests to closed pages.  This improves the page hit rate of the system.  However, high priority requests can cause pages of active requests to be closed in order to get them out.  This will reduce the latency of the high-priority request at the expense of lower bandwidth and increased overall average latency.]
  unc_m_rpq_cycles_full                       [Counts the number of cycles when the Read Pending Queue is full.  When the RPQ is full, the HA will not be able to issue any additional read requests into the iMC.  This count should be similar count in the HA which tracks the number of cycles that the HA has no RPQ credits, just somewhat smaller to account for the credit return overhead.  We generally do not expect to see RPQ become full except for potentially during Write Major Mode or while running with slow DRAM.  This event only tracks non-ISOC queue entries.]
  unc_m_rpq_cycles_ne                         [Counts the number of cycles that the Read Pending Queue is not empty.  This can then be used to calculate the average occupancy (in conjunction with the Read Pending Queue Occupancy count).  The RPQ is used to schedule reads out to the memory controller and to track the requests.  Requests allocate into the RPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the HA to the iMC.  They deallocate after the CAS command has been issued to memory.  This filter is to be used in conjunction with the occupancy filter so that one can correctly track the average occupancies for schedulable entries and scheduled requests.]
  unc_m_rpq_inserts                           [Counts the number of allocations into the Read Pending Queue.  This queue is used to schedule reads out to the memory controller and to track the requests.  Requests allocate into the RPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the HA to the iMC.  They deallocate after the CAS command has been issued to memory.  This includes both ISOCH and non-ISOCH requests.]
  unc_m_rpq_occupancy                         [Accumulates the occupancies of the Read Pending Queue each cycle.  This can then be used to calculate both the average occupancy (in conjunction with the number of cycles not empty) and the average latency (in conjunction with the number of allocations).  The RPQ is used to schedule reads out to the memory controller and to track the requests.  Requests allocate into the RPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the HA to the iMC. They deallocate after the CAS command has been issued to memory.]
  unc_m_wpq_cycles_full                       [Counts the number of cycles when the Write Pending Queue is full.  When the WPQ is full, the HA will not be able to issue any additional read requests into the iMC.  This count should be similar count in the HA which tracks the number of cycles that the HA has no WPQ credits, just somewhat smaller to account for the credit return overhead.]
  unc_m_wpq_cycles_ne                         [Counts the number of cycles that the Write Pending Queue is not empty.  This can then be used to calculate the average queue occupancy (in conjunction with the WPQ Occupancy Accumulation count).  The WPQ is used to schedule write out to the memory controller and to track the writes.  Requests allocate into the WPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the HA to the iMC.  They deallocate after being issued to DRAM.  Write requests themselves are able to complete (from the perspective of the rest of the system) as soon they have 'posted' to the iMC.  This is not to be confused with actually performing the write to DRAM.  Therefore, the average latency for this queue is actually not useful for deconstruction intermediate write latencies.]
  unc_m_wpq_inserts                           [Counts the number of allocations into the Write Pending Queue.  This can then be used to calculate the average queuing latency (in conjunction with the WPQ occupancy count).  The WPQ is used to schedule write out to the memory controller and to track the writes.  Requests allocate into the WPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the HA to the iMC.  They deallocate after being issued to DRAM.  Write requests themselves are able to complete (from the perspective of the rest of the system) as soon they have 'posted' to the iMC.]
  unc_m_wpq_occupancy                         [Accumulates the occupancies of the Write Pending Queue each cycle.  This can then be used to calculate both the average queue occupancy (in conjunction with the number of cycles not empty) and the average latency (in conjunction with the number of allocations).  The WPQ is used to schedule write out to the memory controller and to track the writes.  Requests allocate into the WPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the HA to the iMC.  They deallocate after being issued to DRAM.  Write requests themselves are able to complete (from the perspective of the rest of the system) as soon they have 'posted' to the iMC.  This is not to be confused with actually performing the write to DRAM.  Therefore, the average latency for this queue is actually not useful for deconstruction intermediate write latencies.  So, we provide filtering based on if the request has posted or not.  By using the 'not posted' filter, we can track how long writes spent in the iMC before completions were sent to the HA.  The 'posted' filter, on the other hand, provides information about how much queueing is actually happenning in the iMC for writes before they are actually issued to memory.  High average occupancies will generally coincide with high write major mode counts.]
  unc_m_wpq_read_hit                          [Counts the number of times a request hits in the WPQ (write-pending queue).  The iMC allows writes and reads to pass up other writes to different addresses.  Before a read or a write is issued, it will first CAM the WPQ to see if there is a write pending to that address.  When reads hit, they are able to directly pull their data from the WPQ instead of going to memory.  Writes that hit will overwrite the existing data.  Partial writes that hit will not need to do underfill reads and will simply update their relevant sections.]
  unc_m_wpq_write_hit                         [Counts the number of times a request hits in the WPQ (write-pending queue).  The iMC allows writes and reads to pass up other writes to different addresses.  Before a read or a write is issued, it will first CAM the WPQ to see if there is a write pending to that address.  When reads hit, they are able to directly pull their data from the WPQ instead of going to memory.  Writes that hit will overwrite the existing data.  Partial writes that hit will not need to do underfill reads and will simply update their relevant sections.]
  unc_p_clockticks                            [The PCU runs off a fixed 800 MHz clock.  This event counts the number of pclk cycles measured while the counter was enabled.  The pclk, like the Memory Controller's dclk, counts at a constant rate making it a good measure of actual wall time.]
  unc_p_core0_transition_cycles               [Number of cycles spent performing core C state transitions.  There is one event per core.]
  unc_p_core1_transition_cycles               [Number of cycles spent performing core C state transitions.  There is one event per core.]
  unc_p_core2_transition_cycles               [Number of cycles spent performing core C state transitions.  There is one event per core.]
  unc_p_core3_transition_cycles               [Number of cycles spent performing core C state transitions.  There is one event per core.]
  unc_p_core4_transition_cycles               [Number of cycles spent performing core C state transitions.  There is one event per core.]
  unc_p_core5_transition_cycles               [Number of cycles spent performing core C state transitions.  There is one event per core.]
  unc_p_core6_transition_cycles               [Number of cycles spent performing core C state transitions.  There is one event per core.]
  unc_p_core7_transition_cycles               [Number of cycles spent performing core C state transitions.  There is one event per core.]
  unc_p_demotions_core0                       [Counts the number of times when a configurable cores had a C-state demotion]
  unc_p_demotions_core1                       [Counts the number of times when a configurable cores had a C-state demotion]
  unc_p_demotions_core2                       [Counts the number of times when a configurable cores had a C-state demotion]
  unc_p_demotions_core3                       [Counts the number of times when a configurable cores had a C-state demotion]
  unc_p_demotions_core4                       [Counts the number of times when a configurable cores had a C-state demotion]
  unc_p_demotions_core5                       [Counts the number of times when a configurable cores had a C-state demotion]
  unc_p_demotions_core6                       [Counts the number of times when a configurable cores had a C-state demotion]
  unc_p_demotions_core7                       [Counts the number of times when a configurable cores had a C-state demotion]
  unc_p_freq_band0_cycles                     [Counts the number of cycles that the uncore was running at a frequency greater than or equal to the frequency that is configured in the filter.  One can use all four counters with this event, so it is possible to track up to 4 configurable bands.  One can use edge detect in conjunction with this event to track the number of times that we transitioned into a frequency greater than or equal to the configurable frequency. One can also use inversion to track cycles when we were less than the configured frequency.]
  unc_p_freq_band1_cycles                     [Counts the number of cycles that the uncore was running at a frequency greater than or equal to the frequency that is configured in the filter.  One can use all four counters with this event, so it is possible to track up to 4 configurable bands.  One can use edge detect in conjunction with this event to track the number of times that we transitioned into a frequency greater than or equal to the configurable frequency. One can also use inversion to track cycles when we were less than the configured frequency.]
  unc_p_freq_band2_cycles                     [Counts the number of cycles that the uncore was running at a frequency greater than or equal to the frequency that is configured in the filter.  One can use all four counters with this event, so it is possible to track up to 4 configurable bands.  One can use edge detect in conjunction with this event to track the number of times that we transitioned into a frequency greater than or equal to the configurable frequency. One can also use inversion to track cycles when we were less than the configured frequency.]
  unc_p_freq_band3_cycles                     [Counts the number of cycles that the uncore was running at a frequency greater than or equal to the frequency that is configured in the filter.  One can use all four counters with this event, so it is possible to track up to 4 configurable bands.  One can use edge detect in conjunction with this event to track the number of times that we transitioned into a frequency greater than or equal to the configurable frequency. One can also use inversion to track cycles when we were less than the configured frequency.]
  unc_p_freq_max_current_cycles               [Counts the number of cycles when current is the upper limit on frequency.]
  unc_p_freq_max_limit_thermal_cycles         [Counts the number of cycles when thermal conditions are the upper limit on frequency.  This is related to the THERMAL_THROTTLE CYCLES_ABOVE_TEMP event, which always counts cycles when we are above the thermal temperature.  This event (STRONGEST_UPPER_LIMIT) is sampled at the output of the algorithm that determines the actual frequency, while THERMAL_THROTTLE looks at the input.]
  unc_p_freq_max_os_cycles                    [Counts the number of cycles when the OS is the upper limit on frequency.]
  unc_p_freq_max_power_cycles                 [Counts the number of cycles when power is the upper limit on frequency.]
  unc_p_freq_min_io_p_cycles                  [Counts the number of cycles when IO P Limit is preventing us from dropping the frequency lower.  This algorithm monitors the needs to the IO subsystem on both local and remote sockets and will maintain a frequency high enough to maintain good IO BW.  This is necessary for when all the IA cores on a socket are idle but a user still would like to maintain high IO Bandwidth.]
  unc_p_freq_min_perf_p_cycles                [Counts the number of cycles when Perf P Limit is preventing us from dropping the frequency lower.  Perf P Limit is an algorithm that takes input from remote sockets when determining if a socket should drop it's frequency down.  This is largely to minimize increases in snoop and remote read latencies.]
  unc_p_freq_trans_cycles                     [Counts the number of cycles when the system is changing frequency.  This can not be filtered by thread ID.  One can also use it with the occupancy counter that monitors number of threads in C0 to estimate the performance impact that frequency transitions had on the system.]
  unc_p_memory_phase_shedding_cycles          [Counts the number of cycles that the PCU has triggered memory phase shedding.  This is a mode that can be run in the iMC physicals that saves power at the expense of additional latency.]
  unc_p_power_state_occupancy.cores_c0        [This is an occupancy event that tracks the number of cores that are in C0.  It can be used by itself to get the average number of cores in C0, with threshholding to generate histograms, or with other PCU events and occupancy triggering to capture other details.]
  unc_p_power_state_occupancy.cores_c3        [This is an occupancy event that tracks the number of cores that are in C0.  It can be used by itself to get the average number of cores in C0, with threshholding to generate histograms, or with other PCU events and occupancy triggering to capture other details.]
  unc_p_power_state_occupancy.cores_c6        [This is an occupancy event that tracks the number of cores that are in C0.  It can be used by itself to get the average number of cores in C0, with threshholding to generate histograms, or with other PCU events and occupancy triggering to capture other details.]
  unc_p_prochot_external_cycles               [Counts the number of cycles that we are in external PROCHOT mode.  This mode is triggered when a sensor off the die determines that something off-die (like DRAM) is too hot and must throttle to avoid damaging the chip.]
  unc_p_prochot_internal_cycles               [Counts the number of cycles that we are in Interal PROCHOT mode.  This mode is triggered when a sensor on the die determines that we are too hot and must throttle to avoid damaging the chip.]
  unc_p_total_transition_cycles               [Number of cycles spent performing core C state transitions across all cores.]
  unc_p_volt_trans_cycles_change              [Counts the number of cycles when the system is changing voltage.  There is no filtering supported with this event.  One can use it as a simple event, or use it conjunction with the occupancy events to monitor the number of cores or threads that were impacted by the transition.  This event is calculated by or'ing together the increasing and decreasing events.]
  unc_p_volt_trans_cycles_decrease            [Counts the number of cycles when the system is decreasing voltage.  There is no filtering supported with this event.  One can use it as a simple event, or use it conjunction with the occupancy events to monitor the number of cores or threads that were impacted by the transition.]
  unc_p_volt_trans_cycles_increase            [Counts the number of cycles when the system is increasing voltage.  There is no filtering supported with this event.  One can use it as a simple event, or use it conjunction with the occupancy events to monitor the number of cores or threads that were impacted by the transition.]
  unc_p_vr_hot_cycles                         [tbd]
  unc_q_clockticks                            [Counts the number of clocks in the QPI LL.  This clock runs at 1/8th the 'GT/s' speed of the QPI link.  For example, a 8GT/s link will have qfclk or 1GHz.  JKT does not support dynamic link speeds, so this frequency is fixed.]
  unc_q_cto_count                             [Counts the number of CTO (cluster trigger outs) events that were asserted across the two slots.  If both slots trigger in a given cycle, the event will increment by 2.  You can use edge detect to count the number of cases when both events triggered.]
  unc_q_direct2core.failure_credits           [Counts the number of DRS packets that we attempted to do direct2core on.  There are 4 mutually exlusive filters.  Filter [0] can be used to get successful spawns, while [1:3] provide the different failure cases.  Note that this does not count packets that are not candidates for Direct2Core.  The only candidates for Direct2Core are DRS packets destined for Cbos.]
  unc_q_direct2core.failure_credits_rbt       [Counts the number of DRS packets that we attempted to do direct2core on.  There are 4 mutually exlusive filters.  Filter [0] can be used to get successful spawns, while [1:3] provide the different failure cases.  Note that this does not count packets that are not candidates for Direct2Core.  The only candidates for Direct2Core are DRS packets destined for Cbos.]
  unc_q_direct2core.failure_rbt               [Counts the number of DRS packets that we attempted to do direct2core on.  There are 4 mutually exlusive filters.  Filter [0] can be used to get successful spawns, while [1:3] provide the different failure cases.  Note that this does not count packets that are not candidates for Direct2Core.  The only candidates for Direct2Core are DRS packets destined for Cbos.]
  unc_q_direct2core.success                   [Counts the number of DRS packets that we attempted to do direct2core on.  There are 4 mutually exlusive filters.  Filter [0] can be used to get successful spawns, while [1:3] provide the different failure cases.  Note that this does not count packets that are not candidates for Direct2Core.  The only candidates for Direct2Core are DRS packets destined for Cbos.]
  unc_q_l1_power_cycles                       [Number of QPI qfclk cycles spent in L1 power mode.  L1 is a mode that totally shuts down a QPI link.  Use edge detect to count the number of instances when the QPI link entered L1.  Link power states are per link and per direction, so for example the Tx direction could be in one state while Rx was in another. Because L1 totally shuts down the link, it takes a good amount of time to exit this mode.]
  unc_q_rxl0_power_cycles                     [Number of QPI qfclk cycles spent in L0 power mode in the Link Layer.  L0 is the default mode which provides the highest performance with the most power.  Use edge detect to count the number of instances that the link entered L0.  Link power states are per link and per direction, so for example the Tx direction could be in one state while Rx was in another.  The phy layer  sometimes leaves L0 for training, which will not be captured by this event.]
  unc_q_rxl0p_power_cycles                    [Number of QPI qfclk cycles spent in L0p power mode.  L0p is a mode where we disable 1/2 of the QPI lanes, decreasing our bandwidth in order to save power.  It increases snoop and data transfer latencies and decreases overall bandwidth.  This mode can be very useful in NUMA optimized workloads that largely only utilize QPI for snoops and their responses.  Use edge detect to count the number of instances when the QPI link entered L0p.  Link power states are per link and per direction, so for example the Tx direction could be in one state while Rx was in another.]
  unc_q_rxl_bypassed                          [Counts the number of times that an incoming flit was able to bypass the flit buffer and pass directly across the BGF and into the Egress.  This is a latency optimization, and should generally be the common case.  If this value is less than the number of flits transfered, it implies that there was queueing getting onto the ring, and thus the transactions saw higher latency.]
  unc_q_rxl_crc_errors.link_init              [Number of CRC errors detected in the QPI Agent.  Each QPI flit incorporates 8 bits of CRC for error detection.  This counts the number of flits where the CRC was able to detect an error.  After an error has been detected, the QPI agent will send a request to the transmitting socket to resend the flit (as well as any flits that came after it).]
  unc_q_rxl_crc_errors.normal_op              [Number of CRC errors detected in the QPI Agent.  Each QPI flit incorporates 8 bits of CRC for error detection.  This counts the number of flits where the CRC was able to detect an error.  After an error has been detected, the QPI agent will send a request to the transmitting socket to resend the flit (as well as any flits that came after it).]
  unc_q_rxl_credits_consumed_vn0.drs          [Counts the number of times that an RxQ VN0 credit was consumed (i.e. message uses a VN0 credit for the Rx Buffer).  This includes packets that went through the RxQ and those that were bypasssed.]
  unc_q_rxl_credits_consumed_vn0.hom          [Counts the number of times that an RxQ VN0 credit was consumed (i.e. message uses a VN0 credit for the Rx Buffer).  This includes packets that went through the RxQ and those that were bypasssed.]
  unc_q_rxl_credits_consumed_vn0.ncb          [Counts the number of times that an RxQ VN0 credit was consumed (i.e. message uses a VN0 credit for the Rx Buffer).  This includes packets that went through the RxQ and those that were bypasssed.]
  unc_q_rxl_credits_consumed_vn0.ncs          [Counts the number of times that an RxQ VN0 credit was consumed (i.e. message uses a VN0 credit for the Rx Buffer).  This includes packets that went through the RxQ and those that were bypasssed.]
  unc_q_rxl_credits_consumed_vn0.ndr          [Counts the number of times that an RxQ VN0 credit was consumed (i.e. message uses a VN0 credit for the Rx Buffer).  This includes packets that went through the RxQ and those that were bypasssed.]
  unc_q_rxl_credits_consumed_vn0.snp          [Counts the number of times that an RxQ VN0 credit was consumed (i.e. message uses a VN0 credit for the Rx Buffer).  This includes packets that went through the RxQ and those that were bypasssed.]
  unc_q_rxl_credits_consumed_vna              [Counts the number of times that an RxQ VNA credit was consumed (i.e. message uses a VNA credit for the Rx Buffer).  This includes packets that went through the RxQ and those that were bypasssed.]
  unc_q_rxl_cycles_ne                         [Counts the number of cycles that the QPI RxQ was not empty.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy Accumulator event to calculate the average occupancy.]
  unc_q_rxl_flits_g0.data                     [Counts the number of flits received from the QPI Link.  It includes filters for Idle, protocol, and Data Flits.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time (for L0) or 4B instead of 8B for L0p.]
  unc_q_rxl_flits_g0.idle                     [Counts the number of flits received from the QPI Link.  It includes filters for Idle, protocol, and Data Flits.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time (for L0) or 4B instead of 8B for L0p.]
  unc_q_rxl_flits_g0.non_data                 [Counts the number of flits received from the QPI Link.  It includes filters for Idle, protocol, and Data Flits.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time (for L0) or 4B instead of 8B for L0p.]
  unc_q_rxl_flits_g1.drs                      [Counts the number of flits received from the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_rxl_flits_g1.drs_data                 [Counts the number of flits received from the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_rxl_flits_g1.drs_nondata              [Counts the number of flits received from the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_rxl_flits_g1.hom                      [Counts the number of flits received from the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_rxl_flits_g1.hom_nonreq               [Counts the number of flits received from the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_rxl_flits_g1.hom_req                  [Counts the number of flits received from the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_rxl_flits_g1.snp                      [Counts the number of flits received from the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_rxl_flits_g2.ncb                      [Counts the number of flits received from the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_rxl_flits_g2.ncb_data                 [Counts the number of flits received from the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_rxl_flits_g2.ncb_nondata              [Counts the number of flits received from the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_rxl_flits_g2.ncs                      [Counts the number of flits received from the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_rxl_flits_g2.ndr_ad                   [Counts the number of flits received from the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_rxl_flits_g2.ndr_ak                   [Counts the number of flits received from the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_rxl_inserts                           [Number of allocations into the QPI Rx Flit Buffer.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime.]
  unc_q_rxl_inserts_drs                       [Number of allocations into the QPI Rx Flit Buffer.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime.  This monitors only DRS flits.]
  unc_q_rxl_inserts_hom                       [Number of allocations into the QPI Rx Flit Buffer.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime.  This monitors only HOM flits.]
  unc_q_rxl_inserts_ncb                       [Number of allocations into the QPI Rx Flit Buffer.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime.  This monitors only NCB flits.]
  unc_q_rxl_inserts_ncs                       [Number of allocations into the QPI Rx Flit Buffer.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime.  This monitors only NCS flits.]
  unc_q_rxl_inserts_ndr                       [Number of allocations into the QPI Rx Flit Buffer.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime.  This monitors only NDR flits.]
  unc_q_rxl_inserts_snp                       [Number of allocations into the QPI Rx Flit Buffer.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime.  This monitors only SNP flits.]
  unc_q_rxl_occupancy                         [Accumulates the number of elements in the QPI RxQ in each cycle.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Not Empty event to calculate average occupancy, or with the Flit Buffer Allocations event to track average lifetime.]
  unc_q_rxl_occupancy_drs                     [Accumulates the number of elements in the QPI RxQ in each cycle.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Not Empty event to calculate average occupancy, or with the Flit Buffer Allocations event to track average lifetime.  This monitors DRS flits only.]
  unc_q_rxl_occupancy_hom                     [Accumulates the number of elements in the QPI RxQ in each cycle.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Not Empty event to calculate average occupancy, or with the Flit Buffer Allocations event to track average lifetime.  This monitors HOM flits only.]
  unc_q_rxl_occupancy_ncb                     [Accumulates the number of elements in the QPI RxQ in each cycle.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Not Empty event to calculate average occupancy, or with the Flit Buffer Allocations event to track average lifetime.  This monitors NCB flits only.]
  unc_q_rxl_occupancy_ncs                     [Accumulates the number of elements in the QPI RxQ in each cycle.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Not Empty event to calculate average occupancy, or with the Flit Buffer Allocations event to track average lifetime.  This monitors NCS flits only.]
  unc_q_rxl_occupancy_ndr                     [Accumulates the number of elements in the QPI RxQ in each cycle.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Not Empty event to calculate average occupancy, or with the Flit Buffer Allocations event to track average lifetime.  This monitors NDR flits only.]
  unc_q_rxl_occupancy_snp                     [Accumulates the number of elements in the QPI RxQ in each cycle.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Not Empty event to calculate average occupancy, or with the Flit Buffer Allocations event to track average lifetime.  This monitors SNP flits only.]
  unc_q_rxl_stalls.bgf_drs                    [Number of stalls trying to send to R3QPI.]
  unc_q_rxl_stalls.bgf_hom                    [Number of stalls trying to send to R3QPI.]
  unc_q_rxl_stalls.bgf_ncb                    [Number of stalls trying to send to R3QPI.]
  unc_q_rxl_stalls.bgf_ncs                    [Number of stalls trying to send to R3QPI.]
  unc_q_rxl_stalls.bgf_ndr                    [Number of stalls trying to send to R3QPI.]
  unc_q_rxl_stalls.bgf_snp                    [Number of stalls trying to send to R3QPI.]
  unc_q_rxl_stalls.egress_credits             [Number of stalls trying to send to R3QPI.]
  unc_q_rxl_stalls.gv                         [Number of stalls trying to send to R3QPI.]
  unc_q_txl0_power_cycles                     [Number of QPI qfclk cycles spent in L0 power mode in the Link Layer.  L0 is the default mode which provides the highest performance with the most power.  Use edge detect to count the number of instances that the link entered L0.  Link power states are per link and per direction, so for example the Tx direction could be in one state while Rx was in another.  The phy layer  sometimes leaves L0 for training, which will not be captured by this event.]
  unc_q_txl0p_power_cycles                    [Number of QPI qfclk cycles spent in L0p power mode.  L0p is a mode where we disable 1/2 of the QPI lanes, decreasing our bandwidth in order to save power.  It increases snoop and data transfer latencies and decreases overall bandwidth.  This mode can be very useful in NUMA optimized workloads that largely only utilize QPI for snoops and their responses.  Use edge detect to count the number of instances when the QPI link entered L0p.  Link power states are per link and per direction, so for example the Tx direction could be in one state while Rx was in another.]
  unc_q_txl_bypassed                          [Counts the number of times that an incoming flit was able to bypass the Tx flit buffer and pass directly out the QPI Link. Generally, when data is transmitted across QPI, it will bypass the TxQ and pass directly to the link.  However, the TxQ will be used with L0p and when LLR occurs, increasing latency to transfer out to the link.]
  unc_q_txl_crc_no_credits.almost_full        [Number of cycles when the Tx side ran out of Link Layer Retry credits, causing the Tx to stall.]
  unc_q_txl_crc_no_credits.full               [Number of cycles when the Tx side ran out of Link Layer Retry credits, causing the Tx to stall.]
  unc_q_txl_cycles_ne                         [Counts the number of cycles when the TxQ is not empty. Generally, when data is transmitted across QPI, it will bypass the TxQ and pass directly to the link.  However, the TxQ will be used with L0p and when LLR occurs, increasing latency to transfer out to the link.]
  unc_q_txl_flits_g0.data                     [Counts the number of flits transmitted across the QPI Link.  It includes filters for Idle, protocol, and Data Flits.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time (for L0) or 4B instead of 8B for L0p.]
  unc_q_txl_flits_g0.idle                     [Counts the number of flits transmitted across the QPI Link.  It includes filters for Idle, protocol, and Data Flits.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time (for L0) or 4B instead of 8B for L0p.]
  unc_q_txl_flits_g0.non_data                 [Counts the number of flits transmitted across the QPI Link.  It includes filters for Idle, protocol, and Data Flits.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time (for L0) or 4B instead of 8B for L0p.]
  unc_q_txl_flits_g1.drs                      [Counts the number of flits trasmitted across the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_txl_flits_g1.drs_data                 [Counts the number of flits trasmitted across the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_txl_flits_g1.drs_nondata              [Counts the number of flits trasmitted across the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_txl_flits_g1.hom                      [Counts the number of flits trasmitted across the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_txl_flits_g1.hom_nonreq               [Counts the number of flits trasmitted across the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_txl_flits_g1.hom_req                  [Counts the number of flits trasmitted across the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_txl_flits_g1.snp                      [Counts the number of flits trasmitted across the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_txl_flits_g2.ncb                      [Counts the number of flits trasmitted across the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_txl_flits_g2.ncb_data                 [Counts the number of flits trasmitted across the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_txl_flits_g2.ncb_nondata              [Counts the number of flits trasmitted across the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_txl_flits_g2.ncs                      [Counts the number of flits trasmitted across the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_txl_flits_g2.ndr_ad                   [Counts the number of flits trasmitted across the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_txl_flits_g2.ndr_ak                   [Counts the number of flits trasmitted across the QPI Link.  This is one of three 'groups' that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each 'flit' is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four 'fits', each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI 'speed' (for example, 8.0 GT/s), the 'transfers' here refer to 'fits'.  Therefore, in L0, the system will transfer 1 'flit' at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as 'data' bandwidth.  For example, when we are transfering a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual 'data' and an additional 16 bits of other information.  To calculate 'data' bandwidth, one should therefore do: data flits * 8B / time.]
  unc_q_txl_inserts                           [Number of allocations into the QPI Tx Flit Buffer.  Generally, when data is transmitted across QPI, it will bypass the TxQ and pass directly to the link.  However, the TxQ will be used with L0p and when LLR occurs, increasing latency to transfer out to the link.  This event can be used in conjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime.]
  unc_q_txl_occupancy                         [Accumulates the number of flits in the TxQ.  Generally, when data is transmitted across QPI, it will bypass the TxQ and pass directly to the link.  However, the TxQ will be used with L0p and when LLR occurs, increasing latency to transfer out to the link. This can be used with the cycles not empty event to track average occupancy, or the allocations event to track average lifetime in the TxQ.]
  unc_q_vna_credit_return_occupancy           [Number of VNA credits in the Rx side that are waitng to be returned back across the link.]
  unc_q_vna_credit_returns                    [Number of VNA credits returned.]
  unc_r2_clockticks                           [Counts the number of uclks in the R2PCIe uclk domain.  This could be slightly different than the count in the Ubox because of enable/freeze delays.  However, because the R2PCIe is close to the Ubox, they generally should not diverge by more than a handful of cycles.]
  unc_r2_iio_credits_acquired.drs             [Counts the number of credits that are acquired in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).]
  unc_r2_iio_credits_acquired.ncb             [Counts the number of credits that are acquired in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).]
  unc_r2_iio_credits_acquired.ncs             [Counts the number of credits that are acquired in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).]
  unc_r2_iio_credits_reject.drs               [Counts the number of times that a request pending in the BL Ingress attempted to acquire either a NCB or NCS credit to transmit into the IIO, but was rejected because no credits were available.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).]
  unc_r2_iio_credits_reject.ncb               [Counts the number of times that a request pending in the BL Ingress attempted to acquire either a NCB or NCS credit to transmit into the IIO, but was rejected because no credits were available.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).]
  unc_r2_iio_credits_reject.ncs               [Counts the number of times that a request pending in the BL Ingress attempted to acquire either a NCB or NCS credit to transmit into the IIO, but was rejected because no credits were available.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).]
  unc_r2_iio_credits_used.drs                 [Counts the number of cycles when one or more credits in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).]
  unc_r2_iio_credits_used.ncb                 [Counts the number of cycles when one or more credits in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).]
  unc_r2_iio_credits_used.ncs                 [Counts the number of cycles when one or more credits in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).]
  unc_r2_ring_ad_used.ccw_even                [Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_r2_ring_ad_used.ccw_odd                 [Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_r2_ring_ad_used.cw_even                 [Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_r2_ring_ad_used.cw_odd                  [Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_r2_ring_ak_used.ccw_even                [Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_r2_ring_ak_used.ccw_odd                 [Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_r2_ring_ak_used.cw_even                 [Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_r2_ring_ak_used.cw_odd                  [Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_r2_ring_bl_used.ccw_even                [Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_r2_ring_bl_used.ccw_odd                 [Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_r2_ring_bl_used.cw_even                 [Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_r2_ring_bl_used.cw_odd                  [Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_r2_ring_iv_used.any                     [Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sunk into the ring stop.  The IV ring is unidirectional.  Whether UP or DN is used is dependent on the system programming.  Thereofore, one should generally set both the UP and DN bits for a given polarity (or both) at a given time.]
  unc_r2_rxr_ak_bounces                       [Counts the number of times when a request destined for the AK ingress bounced.]
  unc_r2_rxr_cycles_ne.drs                    [Counts the number of cycles when the R2PCIe Ingress is not empty.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.]
  unc_r2_rxr_cycles_ne.ncb                    [Counts the number of cycles when the R2PCIe Ingress is not empty.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.]
  unc_r2_rxr_cycles_ne.ncs                    [Counts the number of cycles when the R2PCIe Ingress is not empty.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.]
  unc_r2_txr_cycles_full.ad                   [Counts the number of cycles when the R2PCIe Egress buffer is full.]
  unc_r2_txr_cycles_full.ak                   [Counts the number of cycles when the R2PCIe Egress buffer is full.]
  unc_r2_txr_cycles_full.bl                   [Counts the number of cycles when the R2PCIe Egress buffer is full.]
  unc_r2_txr_cycles_ne.ad                     [Counts the number of cycles when the R2PCIe Egress is not empty.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Egress Occupancy Accumulator event in order to calculate average queue occupancy.  Only a single Egress queue can be tracked at any given time.  It is not possible to filter based on direction or polarity.]
  unc_r2_txr_cycles_ne.ak                     [Counts the number of cycles when the R2PCIe Egress is not empty.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Egress Occupancy Accumulator event in order to calculate average queue occupancy.  Only a single Egress queue can be tracked at any given time.  It is not possible to filter based on direction or polarity.]
  unc_r2_txr_cycles_ne.bl                     [Counts the number of cycles when the R2PCIe Egress is not empty.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Egress Occupancy Accumulator event in order to calculate average queue occupancy.  Only a single Egress queue can be tracked at any given time.  It is not possible to filter based on direction or polarity.]
  unc_r2_txr_nacks.ad                         [Counts the number of times that the Egress received a NACK from the ring and could not issue a transaction.]
  unc_r2_txr_nacks.ak                         [Counts the number of times that the Egress received a NACK from the ring and could not issue a transaction.]
  unc_r2_txr_nacks.bl                         [Counts the number of times that the Egress received a NACK from the ring and could not issue a transaction.]
  unc_r3_clockticks                           [Counts the number of uclks in the QPI uclk domain.  This could be slightly different than the count in the Ubox because of enable/freeze delays.  However, because the QPI Agent is close to the Ubox, they generally should not diverge by more than a handful of cycles.]
  unc_r3_iio_credits_acquired.drs             [Counts the number of times the NCS/NCB/DRS credit is acquried in the QPI for sending messages on BL to the IIO.  There is one credit for each of these three message classes (three credits total).  NCS is used for reads to PCIe space, NCB is used for transfering data without coherency, and DRS is used for transfering data with coherency (cachable PCI transactions).  This event can only track one message class at a time.]
  unc_r3_iio_credits_acquired.ncb             [Counts the number of times the NCS/NCB/DRS credit is acquried in the QPI for sending messages on BL to the IIO.  There is one credit for each of these three message classes (three credits total).  NCS is used for reads to PCIe space, NCB is used for transfering data without coherency, and DRS is used for transfering data with coherency (cachable PCI transactions).  This event can only track one message class at a time.]
  unc_r3_iio_credits_acquired.ncs             [Counts the number of times the NCS/NCB/DRS credit is acquried in the QPI for sending messages on BL to the IIO.  There is one credit for each of these three message classes (three credits total).  NCS is used for reads to PCIe space, NCB is used for transfering data without coherency, and DRS is used for transfering data with coherency (cachable PCI transactions).  This event can only track one message class at a time.]
  unc_r3_iio_credits_reject.drs               [Counts the number of times that a request attempted to acquire an NCS/NCB/DRS credit in the QPI for sending messages on BL to the IIO but was rejected because no credit was available.  There is one credit for each of these three message classes (three credits total).  NCS is used for reads to PCIe space, NCB is used for transfering data without coherency, and DRS is used for transfering data with coherency (cachable PCI transactions).  This event can only track one message class at a time.]
  unc_r3_iio_credits_reject.ncb               [Counts the number of times that a request attempted to acquire an NCS/NCB/DRS credit in the QPI for sending messages on BL to the IIO but was rejected because no credit was available.  There is one credit for each of these three message classes (three credits total).  NCS is used for reads to PCIe space, NCB is used for transfering data without coherency, and DRS is used for transfering data with coherency (cachable PCI transactions).  This event can only track one message class at a time.]
  unc_r3_iio_credits_reject.ncs               [Counts the number of times that a request attempted to acquire an NCS/NCB/DRS credit in the QPI for sending messages on BL to the IIO but was rejected because no credit was available.  There is one credit for each of these three message classes (three credits total).  NCS is used for reads to PCIe space, NCB is used for transfering data without coherency, and DRS is used for transfering data with coherency (cachable PCI transactions).  This event can only track one message class at a time.]
  unc_r3_iio_credits_used.drs                 [Counts the number of cycles when the NCS/NCB/DRS credit is in use in the QPI for sending messages on BL to the IIO.  There is one credit for each of these three message classes (three credits total).  NCS is used for reads to PCIe space, NCB is used for transfering data without coherency, and DRS is used for transfering data with coherency (cachable PCI transactions).  This event can only track one message class at a time.]
  unc_r3_iio_credits_used.ncb                 [Counts the number of cycles when the NCS/NCB/DRS credit is in use in the QPI for sending messages on BL to the IIO.  There is one credit for each of these three message classes (three credits total).  NCS is used for reads to PCIe space, NCB is used for transfering data without coherency, and DRS is used for transfering data with coherency (cachable PCI transactions).  This event can only track one message class at a time.]
  unc_r3_iio_credits_used.ncs                 [Counts the number of cycles when the NCS/NCB/DRS credit is in use in the QPI for sending messages on BL to the IIO.  There is one credit for each of these three message classes (three credits total).  NCS is used for reads to PCIe space, NCB is used for transfering data without coherency, and DRS is used for transfering data with coherency (cachable PCI transactions).  This event can only track one message class at a time.]
  unc_r3_ring_ad_used.ccw_even                [Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_r3_ring_ad_used.ccw_odd                 [Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_r3_ring_ad_used.cw_even                 [Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_r3_ring_ad_used.cw_odd                  [Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_r3_ring_ak_used.ccw_even                [Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.]
  unc_r3_ring_ak_used.ccw_odd                 [Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.]
  unc_r3_ring_ak_used.cw_even                 [Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.]
  unc_r3_ring_ak_used.cw_odd                  [Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.]
  unc_r3_ring_bl_used.ccw_even                [Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_r3_ring_bl_used.ccw_odd                 [Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_r3_ring_bl_used.cw_even                 [Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_r3_ring_bl_used.cw_odd                  [Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.]
  unc_r3_ring_iv_used.any                     [Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  The IV ring is unidirectional.  Whether UP or DN is used is dependent on the system programming.  Thereofore, one should generally set both the UP and DN bits for a given polarity (or both) at a given time.]
  unc_r3_rxr_bypassed.ad                      [Counts the number of times when the Ingress was bypassed and an incoming transaction was bypassed directly across the BGF and into the qfclk domain.]
  unc_r3_rxr_cycles_ne.drs                    [Counts the number of cycles when the QPI Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.]
  unc_r3_rxr_cycles_ne.hom                    [Counts the number of cycles when the QPI Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.]
  unc_r3_rxr_cycles_ne.ncb                    [Counts the number of cycles when the QPI Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.]
  unc_r3_rxr_cycles_ne.ncs                    [Counts the number of cycles when the QPI Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.]
  unc_r3_rxr_cycles_ne.ndr                    [Counts the number of cycles when the QPI Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.]
  unc_r3_rxr_cycles_ne.snp                    [Counts the number of cycles when the QPI Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.]
  unc_r3_rxr_inserts.drs                      [Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.]
  unc_r3_rxr_inserts.hom                      [Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.]
  unc_r3_rxr_inserts.ncb                      [Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.]
  unc_r3_rxr_inserts.ncs                      [Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.]
  unc_r3_rxr_inserts.ndr                      [Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.]
  unc_r3_rxr_inserts.snp                      [Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.]
  unc_r3_rxr_occupancy.drs                    [Accumulates the occupancy of a given QPI Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI Ingress Not Empty event to calculate average occupancy or the QPI Ingress Allocations event in order to calculate average queuing latency.]
  unc_r3_rxr_occupancy.hom                    [Accumulates the occupancy of a given QPI Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI Ingress Not Empty event to calculate average occupancy or the QPI Ingress Allocations event in order to calculate average queuing latency.]
  unc_r3_rxr_occupancy.ncb                    [Accumulates the occupancy of a given QPI Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI Ingress Not Empty event to calculate average occupancy or the QPI Ingress Allocations event in order to calculate average queuing latency.]
  unc_r3_rxr_occupancy.ncs                    [Accumulates the occupancy of a given QPI Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI Ingress Not Empty event to calculate average occupancy or the QPI Ingress Allocations event in order to calculate average queuing latency.]
  unc_r3_rxr_occupancy.ndr                    [Accumulates the occupancy of a given QPI Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI Ingress Not Empty event to calculate average occupancy or the QPI Ingress Allocations event in order to calculate average queuing latency.]
  unc_r3_rxr_occupancy.snp                    [Accumulates the occupancy of a given QPI Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI Ingress Not Empty event to calculate average occupancy or the QPI Ingress Allocations event in order to calculate average queuing latency.]
  unc_r3_vn0_credits_reject.drs               [Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.]
  unc_r3_vn0_credits_reject.hom               [Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.]
  unc_r3_vn0_credits_reject.ncb               [Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.]
  unc_r3_vn0_credits_reject.ncs               [Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.]
  unc_r3_vn0_credits_reject.ndr               [Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.]
  unc_r3_vn0_credits_reject.snp               [Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.]
  unc_r3_vn0_credits_used.drs                 [Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.]
  unc_r3_vn0_credits_used.hom                 [Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.]
  unc_r3_vn0_credits_used.ncb                 [Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.]
  unc_r3_vn0_credits_used.ncs                 [Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.]
  unc_r3_vn0_credits_used.ndr                 [Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.]
  unc_r3_vn0_credits_used.snp                 [Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.]
  unc_r3_vna_credit_cycles_out                [Number of QPI uclk cycles when the transmitted has no VNA credits available and therefore cannot send any requests on this channel.  Note that this does not mean that no flits can be transmitted, as those holding VN0 credits will still (potentially) be able to transmit.  Generally it is the goal of the uncore that VNA credits should not run out, as this can substantially throttle back useful QPI bandwidth.]
  unc_r3_vna_credit_cycles_used               [Number of QPI uclk cycles with one or more VNA credits in use.  This event can be used in conjunction with the VNA In-Use Accumulator to calculate the average number of used VNA credits.]
  unc_r3_vna_credits_acquired                 [Number of QPI VNA Credit acquisitions.  This event can be used in conjunction with the VNA In-Use Accumulator to calculate the average lifetime of a credit holder.  VNA credits are used by all message classes in order to communicate across QPI.  If a packet is unable to acquire credits, it will then attempt to use credts from the VN0 pool.  Note that a single packet may require multiple flit buffers (i.e. when data is being transfered).  Therefore, this event will increment by the number of credits acquired in each cycle.  Filtering based on message class is not provided.  One can count the number of packets transfered in a given message class using an qfclk event.]
  unc_r3_vna_credits_reject.drs               [Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.]
  unc_r3_vna_credits_reject.hom               [Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.]
  unc_r3_vna_credits_reject.ncb               [Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.]
  unc_r3_vna_credits_reject.ncs               [Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.]
  unc_r3_vna_credits_reject.ndr               [Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.]
  unc_r3_vna_credits_reject.snp               [Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.]
  unc_u_clockticks                            [tbd]
  unc_u_event_msg.doorbell_rcvd               [Virtual Logical Wire (legacy) message were received from Uncore.   Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.]
  unc_u_event_msg.int_prio                    [Virtual Logical Wire (legacy) message were received from Uncore.   Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.]
  unc_u_event_msg.ipi_rcvd                    [Virtual Logical Wire (legacy) message were received from Uncore.   Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.]
  unc_u_event_msg.msi_rcvd                    [Virtual Logical Wire (legacy) message were received from Uncore.   Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.]
  unc_u_event_msg.vlw_rcvd                    [Virtual Logical Wire (legacy) message were received from Uncore.   Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.]
  unc_u_filter_match.disable                  [Filter match per thread (w/ or w/o Filter Enable).  Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.]
  unc_u_filter_match.enable                   [Filter match per thread (w/ or w/o Filter Enable).  Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.]
  unc_u_filter_match.u2c_disable              [Filter match per thread (w/ or w/o Filter Enable).  Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.]
  unc_u_filter_match.u2c_enable               [Filter match per thread (w/ or w/o Filter Enable).  Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID.]
  unc_u_lock_cycles                           [Number of times an IDI Lock/SplitLock sequence was started]
  unc_u_msg_chnl_size_count.4b                [Number of transactions on the message channel filtered by request size.  This includes both reads and writes.]
  unc_u_msg_chnl_size_count.8b                [Number of transactions on the message channel filtered by request size.  This includes both reads and writes.]
  unc_u_phold_cycles.ack_to_deassert          [PHOLD cycles.  Filter from source CoreID.]
  unc_u_phold_cycles.assert_to_ack            [PHOLD cycles.  Filter from source CoreID.]
  unc_u_racu_requests.count                   [tbd]
  unc_u_u2c_events.cmc                        [Events coming from Uncore can be sent to one or all cores]
  unc_u_u2c_events.livelock                   [Events coming from Uncore can be sent to one or all cores]
  unc_u_u2c_events.lterror                    [Events coming from Uncore can be sent to one or all cores]
  unc_u_u2c_events.monitor_t0                 [Events coming from Uncore can be sent to one or all cores]
  unc_u_u2c_events.monitor_t1                 [Events coming from Uncore can be sent to one or all cores]
  unc_u_u2c_events.other                      [Events coming from Uncore can be sent to one or all cores]
  unc_u_u2c_events.trap                       [Events coming from Uncore can be sent to one or all cores]
  unc_u_u2c_events.umc                        [Events coming from Uncore can be sent to one or all cores]
